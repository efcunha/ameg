from flask import Flask, render_template, request, redirect, url_for, flash, session, send_file, send_from_directory
from flask_compress import Compress
from database import get_db_connection, init_db_tables, create_admin_user, registrar_auditoria, inserir_movimentacao_caixa, inserir_comprovante_caixa, listar_movimentacoes_caixa, obter_saldo_caixa, listar_cadastros_simples, usuario_tem_permissao, adicionar_permissao_usuario, obter_permissoes_usuario, remover_permissao_usuario, obter_comprovantes_movimentacao
import psycopg2.extras
import os
import gzip

# Cache simples em mem√≥ria para estat√≠sticas
stats_cache = {
    'data': None,
    'timestamp': None,
    'ttl': 300  # 5 minutos
}

def get_cached_stats():
    """Retorna estat√≠sticas do cache ou busca no banco se expirado"""
    now = datetime.now()
    
    # Verificar se cache √© v√°lido
    if (stats_cache['data'] is not None and 
        stats_cache['timestamp'] is not None and
        (now - stats_cache['timestamp']).seconds < stats_cache['ttl']):
        return stats_cache['data']
    
    # Cache expirado, buscar dados atualizados
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Contar registros otimizado
        cursor.execute('SELECT COUNT(*) FROM cadastros')
        total_cadastros = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM arquivos_saude')
        total_arquivos = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM usuarios WHERE tipo = %s', ('admin',))
        total_admins = cursor.fetchone()[0]
        
        cursor.close()
        conn.close()
        
        # Atualizar cache
        stats_cache['data'] = {
            'total': total_cadastros,
            'arquivos': total_arquivos,
            'admins': total_admins
        }
        stats_cache['timestamp'] = now
        
        return stats_cache['data']
        
    except Exception as e:
        logger.error(f"Erro ao buscar estat√≠sticas: {e}")
        return {'total': 0, 'arquivos': 0, 'admins': 0}

def invalidate_stats_cache():
    """Invalida o cache de estat√≠sticas"""
    stats_cache['data'] = None
    stats_cache['timestamp'] = None
from psycopg2.extras import RealDictCursor
import csv
import io
import os
import logging
import traceback
from datetime import datetime, timedelta
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename

# Configurar logging detalhado
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'ameg_secret_2024_fallback_key_change_in_production')
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024

# Configurar compress√£o
Compress(app)

# Middleware para servir arquivos comprimidos
@app.after_request
def after_request(response):
    # Adiciona headers de cache para arquivos est√°ticos
    if request.endpoint == 'static':
        response.cache_control.max_age = 31536000  # 1 ano
        response.cache_control.public = True
    
    # Compress√£o manual para arquivos CSS/JS se dispon√≠vel
    if (request.endpoint == 'static' and 
        'gzip' in request.accept_encodings and
        (request.path.endswith('.css') or request.path.endswith('.js'))):
        
        gzip_path = request.path + '.gz'
        if os.path.exists('static' + gzip_path.replace('/static', '')):
            response.headers['Content-Encoding'] = 'gzip'
    
    return response

logger.info("üöÄ Iniciando aplica√ß√£o AMEG")
logger.info(f"RAILWAY_ENVIRONMENT: {os.environ.get('RAILWAY_ENVIRONMENT')}")

# Fun√ß√£o helper para verificar se usu√°rio √© admin
def is_admin_user(username):
    """Verifica se o usu√°rio tem privil√©gios de administrador"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT tipo FROM usuarios WHERE usuario = %s', (username,))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        
        if result:
            tipo = result[0] if isinstance(result, tuple) else result.get('tipo', 'usuario')
            return tipo == 'admin'
        return username == 'admin'  # Fallback para compatibilidade
    except Exception as e:
        logger.error(f"Erro ao verificar admin: {e}")
        return username == 'admin'  # Fallback para compatibilidade

# Disponibilizar fun√ß√£o para templates
@app.context_processor
def inject_user_functions():
    return dict(is_admin_user=is_admin_user)
logger.info(f"DATABASE_URL presente: {'DATABASE_URL' in os.environ}")
logger.debug(f"SECRET_KEY configurada: {bool(app.secret_key)}")

# Inicializar banco na inicializa√ß√£o (apenas no Railway)
if os.environ.get('RAILWAY_ENVIRONMENT'):
    logger.info("üîß Iniciando configura√ß√£o do banco PostgreSQL...")
    try:
        logger.info("üîß Inicializando tabelas do banco primeiro...")
        logger.debug("Chamando init_db_tables()...")
        init_db_tables()
        logger.info("‚úÖ Tabelas inicializadas")
        
        logger.info("üë§ Criando usu√°rio admin...")
        logger.debug("Chamando create_admin_user()...")
        create_admin_user()
        logger.info("‚úÖ Usu√°rio admin configurado")
        
        logger.info("‚úÖ Banco inicializado completamente no Railway")
    except Exception as e:
        logger.error(f"‚ùå Erro na inicializa√ß√£o do banco: {e}")
        logger.error(f"Tipo do erro: {type(e)}")
        logger.error(f"Args do erro: {e.args}")
        import traceback
        logger.error(f"Traceback completo: {traceback.format_exc()}")
        logger.warning("‚ö†Ô∏è Continuando sem inicializa√ß√£o do banco...")
else:
    logger.info("üè† Ambiente local detectado - usando PostgreSQL")

ALLOWED_EXTENSIONS = {'pdf', 'png', 'jpg', 'jpeg', 'gif', 'doc', 'docx'}

# Limites dos campos conforme definido na tabela do banco
FIELD_LIMITS = {
    'nome_completo': 255,
    'numero': 10,
    'bairro': 100,
    'cep': 10,
    'telefone': 20,
    'titulo_eleitor': 20,
    'cidade_titulo': 100,
    'cpf': 14,
    'rg': 20,
    'nis': 20,
    'estado_civil': 30,
    'escolaridade': 100,
    'profissao': 100,
    'nome_companheiro': 255,
    'cpf_companheiro': 14,
    'rg_companheiro': 20,
    'escolaridade_companheiro': 100,
    'profissao_companheiro': 100,
    'titulo_companheiro': 20,
    'cidade_titulo_companheiro': 100,
    'nis_companheiro': 20,
    'tipo_trabalho': 100,
    'casa_tipo': 50,
    'casa_material': 50,
    'energia': 10,
    'lixo': 10,
    'agua': 10,
    'esgoto': 10,
    'tem_doenca_cronica': 10,
    'usa_medicamento_continuo': 10,
    'tem_doenca_mental': 10,
    'tem_deficiencia': 10,
    'precisa_cuidados_especiais': 10,
    'atua_ponto_fixo': 10,
    'trabalho_continuo_temporada': 20,
    'sofreu_acidente_trabalho': 10,
    'trabalho_incomoda_calor': 10,
    'trabalho_incomoda_barulho': 10,
    'trabalho_incomoda_seguranca': 10,
    'trabalho_incomoda_banheiros': 10,
    'trabalho_incomoda_outro': 10,
    'acesso_banheiro_agua': 10,
    'possui_autorizacao_municipal': 10,
    'problemas_fiscalizacao_policia': 10,
    'estrutura_barraca': 10,
    'estrutura_carrinho': 10,
    'estrutura_mesa': 10,
    'estrutura_outro': 10,
    'necessita_energia_eletrica': 10,
    'utiliza_gas_cozinha': 10,
    'usa_veiculo_proprio': 10,
    'fonte_renda_trabalho_ambulante': 10,
    'fonte_renda_aposentadoria': 10,
    'fonte_renda_outro_trabalho': 10,
    'fonte_renda_beneficio_social': 10,
    'fonte_renda_outro': 10
}

def validate_field_lengths(form_data):
    """Valida se os campos n√£o excedem os limites da tabela"""
    errors = []
    
    for field_name, max_length in FIELD_LIMITS.items():
        if field_name in form_data:
            value = str(form_data[field_name]).strip()
            if len(value) > max_length:
                field_display = field_name.replace('_', ' ').title()
                errors.append(f"{field_display}: m√°ximo {max_length} caracteres (atual: {len(value)})")
    
    return errors

def login_required(f):
    from functools import wraps
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

# Headers de seguran√ßa
@app.after_request
def add_security_headers(response):
    response.headers['X-Content-Type-Options'] = 'nosniff'
    response.headers['X-Frame-Options'] = 'DENY'
    response.headers['X-XSS-Protection'] = '1; mode=block'
    response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'
    return response

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/logo')
def logo():
    """Rota espec√≠fica para o logo"""
    return send_from_directory('static/img', 'logo-ameg.jpeg')

@app.route('/')
def login():
    if 'usuario' in session:
        return redirect(url_for('dashboard'))
    
    # Limpar mensagens flash antigas na tela de login
    session.pop('_flashes', None)
    
    return render_template('login.html')

@app.route('/login', methods=['POST'])
def fazer_login():
    usuario = request.form['usuario']
    senha = request.form['senha']
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # No Railway sempre ser√° PostgreSQL
    cursor.execute('SELECT senha, tipo FROM usuarios WHERE usuario = %s', (usuario,))
    
    user = cursor.fetchone()
    cursor.close()
    conn.close()
    
    if user and check_password_hash(user[0], senha):
        session['usuario'] = usuario
        session['tipo'] = user[1]  # Definir o tipo na sess√£o
        
        # Registrar auditoria de login
        registrar_auditoria(
            usuario=usuario,
            acao='LOGIN',
            tabela='usuarios',
            dados_novos=f"Login realizado com sucesso",
            ip_address=request.remote_addr,
            user_agent=request.headers.get('User-Agent')
        )
        
        return redirect(url_for('dashboard'))
    else:
        flash('Usu√°rio ou senha incorretos!')
        return redirect(url_for('login'))

@app.route('/logout')
def logout():
    session.pop('usuario', None)
    return redirect(url_for('login'))

@app.route('/dashboard')
def dashboard():
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    # Usar cache para estat√≠sticas
    stats = get_cached_stats()
    
    # Verificar permiss√£o de caixa
    tem_permissao_caixa = usuario_tem_permissao(session['usuario'], 'caixa')
    
    # Buscar √∫ltimos cadastros (n√£o cachear pois muda frequentemente)
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT id, nome_completo, telefone, bairro, data_cadastro FROM cadastros ORDER BY data_cadastro DESC LIMIT 5')
    ultimos = cursor.fetchall()
    cursor.close()
    conn.close()
    
    return render_template('dashboard.html', 
                         total=stats['total'], 
                         ultimos=ultimos,
                         tem_permissao_caixa=tem_permissao_caixa)

@app.route('/arquivos_cadastros')
def arquivos_cadastros():
    import logging
    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger(__name__)
    
    logger.info("=== INICIANDO arquivos_cadastros ===")
    
    if 'usuario' not in session:
        logger.warning("Usu√°rio n√£o autenticado, redirecionando para login")
        return redirect(url_for('login'))
    
    logger.info(f"Usu√°rio autenticado: {session.get('usuario')}")
    
    try:
        logger.info("Tentando conectar ao banco de dados")
        conn = get_db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        logger.info("Conex√£o com banco estabelecida com sucesso")
        
        # Buscar apenas cadastros que t√™m arquivos anexados
        query_cadastros = '''
            SELECT c.id, c.nome_completo, c.cpf,
                   COUNT(a.id) as arquivos_count
            FROM cadastros c
            INNER JOIN arquivos_saude a ON c.id = a.cadastro_id
            GROUP BY c.id, c.nome_completo, c.cpf
            HAVING COUNT(a.id) > 0
            ORDER BY c.nome_completo
        '''
        logger.info(f"Executando query principal: {query_cadastros}")
        cursor.execute(query_cadastros)
        cadastros_data = cursor.fetchall()
        logger.info(f"Query executada com sucesso. {len(cadastros_data)} cadastros encontrados")
        
        cadastros = []
        for i, cadastro_data in enumerate(cadastros_data):
            logger.info(f"Processando cadastro {i+1}/{len(cadastros_data)}: ID={cadastro_data['id']}, Nome={cadastro_data['nome_completo']}")
            
            # Buscar arquivos de sa√∫de para cada cadastro
            query_arquivos = '''
                SELECT id, tipo_arquivo, nome_arquivo, descricao, data_upload
                FROM arquivos_saude 
                WHERE cadastro_id = %s
                ORDER BY data_upload DESC
            '''
            logger.info(f"Buscando arquivos para cadastro ID {cadastro_data['id']}")
            cursor.execute(query_arquivos, (cadastro_data['id'],))
            arquivos = cursor.fetchall()
            logger.info(f"Encontrados {len(arquivos)} arquivos para cadastro ID {cadastro_data['id']}")
            
            cadastro_obj = {
                'id': cadastro_data['id'],
                'nome_completo': cadastro_data['nome_completo'],
                'cpf': cadastro_data['cpf'],
                'arquivos_count': cadastro_data['arquivos_count'],
                'arquivos_saude': arquivos
            }
            cadastros.append(cadastro_obj)
            logger.debug(f"Cadastro processado: {cadastro_obj}")
        
        cursor.close()
        conn.close()
        logger.info("Conex√£o com banco fechada")
        
        logger.info(f"Renderizando template com {len(cadastros)} cadastros")
        return render_template('arquivos_cadastros.html', cadastros=cadastros)
        
    except Exception as e:
        logger.error(f"ERRO em arquivos_cadastros: {str(e)}")
        logger.error(f"Tipo do erro: {type(e).__name__}")
        import traceback
        logger.error(f"Traceback completo: {traceback.format_exc()}")
        
        try:
            cursor.close()
            conn.close()
            logger.info("Conex√£o fechada ap√≥s erro")
        except:
            logger.error("Erro ao fechar conex√£o")
        
        flash(f'Erro ao carregar arquivos: {str(e)}', 'error')
        return redirect(url_for('dashboard'))

@app.route('/exportar_arquivos_pdf/<int:cadastro_id>')
def exportar_arquivos_pdf(cadastro_id):
    import logging
    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger(__name__)
    
    logger.info(f"=== INICIANDO exportar_arquivos_pdf para cadastro_id={cadastro_id} ===")
    
    if 'usuario' not in session:
        logger.warning("Usu√°rio n√£o autenticado, redirecionando para login")
        return redirect(url_for('login'))
    
    logger.info(f"Usu√°rio autenticado: {session.get('usuario')}")
    
    try:
        logger.info("Conectando ao banco de dados")
        conn = get_db_connection()
        cursor = conn.cursor()
        logger.info("Conex√£o estabelecida")
        
        # Buscar dados do cadastro
        query_cadastro = 'SELECT * FROM cadastros WHERE id = %s'
        logger.info(f"Buscando cadastro: {query_cadastro} com ID={cadastro_id}")
        cursor.execute(query_cadastro, (cadastro_id,))
        cadastro = cursor.fetchone()
        
        if not cadastro:
            logger.warning(f"Cadastro ID {cadastro_id} n√£o encontrado")
            cursor.close()
            conn.close()
            return "Cadastro n√£o encontrado", 404
        
        logger.info(f"Cadastro encontrado: {cadastro[1]} (ID: {cadastro[0]})")
        
        # Buscar arquivos de sa√∫de
        query_arquivos = '''
            SELECT tipo_arquivo, nome_arquivo, descricao, data_upload, caminho_arquivo
            FROM arquivos_saude 
            WHERE cadastro_id = %s
            ORDER BY tipo_arquivo, data_upload
        '''
        logger.info(f"Buscando arquivos: {query_arquivos}")
        cursor.execute(query_arquivos, (cadastro_id,))
        arquivos = cursor.fetchall()
        logger.info(f"Encontrados {len(arquivos)} arquivos")
        
        for i, arquivo in enumerate(arquivos):
            logger.debug(f"Arquivo {i+1}: tipo={arquivo[0]}, nome={arquivo[1]}, desc={arquivo[2]}")
        
        cursor.close()
        conn.close()
        logger.info("Conex√£o fechada")
        
        # Gerar PDF
        logger.info("Iniciando gera√ß√£o do PDF")
        from reportlab.lib.pagesizes import A4
        from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.lib import colors
        from reportlab.lib.units import inch
        from io import BytesIO
        
        logger.info("Imports do ReportLab realizados com sucesso")
        
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, topMargin=0.5*inch)
        styles = getSampleStyleSheet()
        story = []
        logger.info("Documento PDF inicializado")
        
        # T√≠tulo
        title_style = ParagraphStyle('CustomTitle', parent=styles['Heading1'], fontSize=16, spaceAfter=20)
        story.append(Paragraph(f"Relat√≥rio de Arquivos de Sa√∫de", title_style))
        logger.info("T√≠tulo adicionado")
        
        # Dados do cadastro
        nome = cadastro[1] or 'N/A'
        cpf = cadastro[13] or 'N/A'
        telefone = cadastro[6] or 'N/A'
        
        story.append(Paragraph(f"<b>Nome:</b> {nome}", styles['Normal']))
        story.append(Paragraph(f"<b>CPF:</b> {cpf}", styles['Normal']))
        story.append(Paragraph(f"<b>Telefone:</b> {telefone}", styles['Normal']))
        story.append(Spacer(1, 20))
        logger.info("Dados do cadastro adicionados")
        
        # Lista de arquivos
        if arquivos:
            logger.info("Processando lista de arquivos")
            story.append(Paragraph("<b>Arquivos de Sa√∫de Anexados:</b>", styles['Heading2']))
            story.append(Spacer(1, 10))
            
            # Agrupar por tipo
            tipos = {}
            for arquivo in arquivos:
                tipo = arquivo[0]
                if tipo not in tipos:
                    tipos[tipo] = []
                tipos[tipo].append(arquivo)
            
            logger.info(f"Arquivos agrupados em {len(tipos)} tipos: {list(tipos.keys())}")
            
            for tipo, lista_arquivos in tipos.items():
                logger.info(f"Processando tipo '{tipo}' com {len(lista_arquivos)} arquivos")
                story.append(Paragraph(f"<b>{tipo.title()}:</b>", styles['Heading3']))
                
                for arquivo in lista_arquivos:
                    story.append(Paragraph(f"‚Ä¢ {arquivo[1]}", styles['Normal']))
                    if arquivo[2]:  # descri√ß√£o
                        story.append(Paragraph(f"  <i>{arquivo[2]}</i>", styles['Normal']))
                    story.append(Paragraph(f"  Data: {arquivo[3].strftime('%d/%m/%Y %H:%M')}", styles['Normal']))
                    story.append(Spacer(1, 5))
                
                story.append(Spacer(1, 10))
        else:
            logger.info("Nenhum arquivo encontrado")
            story.append(Paragraph("Nenhum arquivo de sa√∫de anexado.", styles['Normal']))
        
        logger.info("Construindo documento PDF")
        doc.build(story)
        buffer.seek(0)
        logger.info("PDF gerado com sucesso")
        
        filename = f'arquivos_saude_{nome.replace(" ", "_")}.pdf'
        logger.info(f"Enviando arquivo: {filename}")
        
        return send_file(
            buffer,
            as_attachment=True,
            download_name=filename,
            mimetype='application/pdf'
        )
        
    except Exception as e:
        logger.error(f"ERRO CR√çTICO em exportar_arquivos_pdf: {str(e)}")
        logger.error(f"Tipo do erro: {type(e).__name__}")
        import traceback
        logger.error(f"Traceback completo: {traceback.format_exc()}")
        
        try:
            cursor.close()
            conn.close()
            logger.info("Conex√£o fechada ap√≥s erro")
        except:
            logger.error("Erro ao fechar conex√£o ap√≥s erro principal")
        
        flash(f'Erro ao gerar PDF: {str(e)}', 'error')
        return redirect(url_for('arquivos_cadastros'))

@app.route('/cadastrar', methods=['GET', 'POST'])
def cadastrar():
    if 'usuario' not in session:
        logger.debug("Usu√°rio n√£o logado tentando acessar /cadastrar")
        return redirect(url_for('login'))
    
    if request.method == 'POST':
        logger.info("üÜï Iniciando novo cadastro...")
        logger.debug(f"Dados recebidos: nome_completo={request.form.get('nome_completo')}")
        
        # Validar limites dos campos
        validation_errors = validate_field_lengths(request.form)
        if validation_errors:
            logger.warning(f"‚ùå Valida√ß√£o falhou: {len(validation_errors)} erros encontrados")
            for error in validation_errors:
                flash(f"Erro de valida√ß√£o: {error}", 'error')
            return render_template('cadastrar.html')
        
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            logger.debug("Conex√£o com banco estabelecida para cadastro")
            
            # Preparar dados para INSERT - tratar valores vazios para INTEGER
            def safe_int_or_null(value):
                if value == '' or value is None:
                    return None
                try:
                    return int(value)
                except (ValueError, TypeError):
                    return None
            
            def safe_decimal_or_null(value):
                if value == '' or value is None:
                    return None
                try:
                    return float(value)
                except (ValueError, TypeError):
                    return None
            
            dados_insert = (
                request.form.get('nome_completo'), request.form.get('endereco'), request.form.get('numero'),
                request.form.get('bairro'), request.form.get('cep'), request.form.get('cidade'), request.form.get('estado'), request.form.get('telefone'),
                request.form.get('ponto_referencia'), request.form.get('genero'), safe_int_or_null(request.form.get('idade')),
                request.form.get('data_nascimento'), request.form.get('titulo_eleitor'), request.form.get('cidade_titulo'),
                request.form.get('cpf'), request.form.get('rg'), request.form.get('nis'),
                request.form.get('estado_civil'), request.form.get('escolaridade'), request.form.get('profissao'),
                request.form.get('nome_companheiro'), request.form.get('cpf_companheiro'), request.form.get('rg_companheiro'),
                safe_int_or_null(request.form.get('idade_companheiro')), request.form.get('escolaridade_companheiro'), request.form.get('profissao_companheiro'),
                request.form.get('data_nascimento_companheiro'), request.form.get('titulo_companheiro'), request.form.get('cidade_titulo_companheiro'),
                request.form.get('nis_companheiro'), request.form.get('tipo_trabalho'), safe_int_or_null(request.form.get('pessoas_trabalham')),
                safe_int_or_null(request.form.get('aposentados_pensionistas')), safe_int_or_null(request.form.get('num_pessoas_familia')), safe_int_or_null(request.form.get('num_familias')),
                safe_int_or_null(request.form.get('adultos')), safe_int_or_null(request.form.get('criancas')), safe_int_or_null(request.form.get('adolescentes')),
                safe_int_or_null(request.form.get('idosos')), safe_int_or_null(request.form.get('gestantes')), safe_int_or_null(request.form.get('nutrizes')),
                safe_decimal_or_null(request.form.get('renda_familiar')), safe_decimal_or_null(request.form.get('renda_per_capita')), safe_decimal_or_null(request.form.get('bolsa_familia')),
                request.form.get('casa_tipo'), request.form.get('casa_material'), request.form.get('energia'),
                request.form.get('lixo'), request.form.get('agua'), request.form.get('esgoto'),
                request.form.get('observacoes'), request.form.get('tem_doenca_cronica'), request.form.get('doencas_cronicas'),
                request.form.get('usa_medicamento_continuo'), request.form.get('medicamentos_continuos'), request.form.get('tem_doenca_mental'),
                request.form.get('doencas_mentais'), request.form.get('tem_deficiencia'), request.form.get('tipo_deficiencia'),
                request.form.get('precisa_cuidados_especiais'), request.form.get('cuidados_especiais'),
                # Novos campos de trabalho
                request.form.get('com_que_trabalha'), request.form.get('onde_trabalha'), request.form.get('localizacao_trabalho'), request.form.get('horario_trabalho'),
                request.form.get('tempo_atividade'), request.form.get('atua_ponto_fixo'), request.form.get('qual_ponto_fixo'),
                safe_int_or_null(request.form.get('dias_semana_trabalha')), request.form.get('trabalho_continuo_temporada'),
                request.form.get('sofreu_acidente_trabalho'), request.form.get('qual_acidente'),
                request.form.get('trabalho_incomoda_calor'), request.form.get('trabalho_incomoda_barulho'),
                request.form.get('trabalho_incomoda_seguranca'), request.form.get('trabalho_incomoda_banheiros'),
                request.form.get('trabalho_incomoda_outro'), request.form.get('trabalho_incomoda_outro_desc'),
                request.form.get('acesso_banheiro_agua'), safe_int_or_null(request.form.get('trabalha_sozinho_ajudantes')),
                request.form.get('possui_autorizacao_municipal'), request.form.get('problemas_fiscalizacao_policia'),
                request.form.get('estrutura_barraca'), request.form.get('estrutura_carrinho'),
                request.form.get('estrutura_mesa'), request.form.get('estrutura_outro'), request.form.get('estrutura_outro_desc'),
                request.form.get('necessita_energia_eletrica'), request.form.get('utiliza_gas_cozinha'),
                request.form.get('usa_veiculo_proprio'), request.form.get('qual_veiculo'),
                request.form.get('fonte_renda_trabalho_ambulante'), request.form.get('fonte_renda_aposentadoria'),
                request.form.get('fonte_renda_outro_trabalho'), request.form.get('fonte_renda_beneficio_social'),
                request.form.get('fonte_renda_outro'), request.form.get('fonte_renda_outro_desc'),
                safe_int_or_null(request.form.get('pessoas_dependem_renda')),
                request.form.get('foto_base64')  # Campo da foto
            )
            
            logger.debug(f"üìä Preparando INSERT com {len(dados_insert)} valores")
            logger.debug(f"üîç Primeiros 5 valores: {dados_insert[:5]}")
            logger.debug(f"üîç √öltimos 5 valores: {dados_insert[-5:]}")
            
            logger.debug("Executando INSERT para novo cadastro...")
            cursor.execute("""INSERT INTO cadastros (
            nome_completo, endereco, numero, bairro, cep, cidade, estado, telefone, ponto_referencia, genero, idade,
            data_nascimento, titulo_eleitor, cidade_titulo, cpf, rg, nis, estado_civil,
            escolaridade, profissao, nome_companheiro, cpf_companheiro, rg_companheiro,
            idade_companheiro, escolaridade_companheiro, profissao_companheiro, data_nascimento_companheiro,
            titulo_companheiro, cidade_titulo_companheiro, nis_companheiro, tipo_trabalho,
            pessoas_trabalham, aposentados_pensionistas, num_pessoas_familia, num_familias,
            adultos, criancas, adolescentes, idosos, gestantes, nutrizes, renda_familiar,
            renda_per_capita, bolsa_familia, casa_tipo, casa_material, energia, lixo, agua,
            esgoto, observacoes, tem_doenca_cronica, doencas_cronicas, usa_medicamento_continuo,
            medicamentos_continuos, tem_doenca_mental, doencas_mentais, tem_deficiencia,
            tipo_deficiencia, precisa_cuidados_especiais, cuidados_especiais,
            com_que_trabalha, onde_trabalha, localizacao_trabalho, horario_trabalho, tempo_atividade, atua_ponto_fixo,
            qual_ponto_fixo, dias_semana_trabalha, trabalho_continuo_temporada, sofreu_acidente_trabalho,
            qual_acidente, trabalho_incomoda_calor, trabalho_incomoda_barulho, trabalho_incomoda_seguranca,
            trabalho_incomoda_banheiros, trabalho_incomoda_outro, trabalho_incomoda_outro_desc,
            acesso_banheiro_agua, trabalha_sozinho_ajudantes, possui_autorizacao_municipal,
            problemas_fiscalizacao_policia, estrutura_barraca, estrutura_carrinho, estrutura_mesa,
            estrutura_outro, estrutura_outro_desc, necessita_energia_eletrica, utiliza_gas_cozinha,
            usa_veiculo_proprio, qual_veiculo, fonte_renda_trabalho_ambulante, fonte_renda_aposentadoria,
            fonte_renda_outro_trabalho, fonte_renda_beneficio_social, fonte_renda_outro,
            fonte_renda_outro_desc, pessoas_dependem_renda, foto_base64
        ) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)""",
            dados_insert)
            conn.commit()
            
            logger.info("‚úÖ INSERT executado com sucesso!")
            
            # Invalidar cache de estat√≠sticas
            invalidate_stats_cache()
            
            # Registrar auditoria
            registrar_auditoria(
                usuario=session.get('usuario', 'Sistema'),
                acao='INSERT',
                tabela='cadastros',
                dados_novos=f"Nome: {request.form.get('nome_completo')}, CPF: {request.form.get('cpf')}",
                ip_address=request.remote_addr,
                user_agent=request.headers.get('User-Agent')
            )
        
            # Para obter o ID do cadastro inserido, usar a mesma conex√£o
            logger.debug("üîç Buscando ID do cadastro inserido...")
            
            cursor.execute('SELECT id FROM cadastros ORDER BY id DESC LIMIT 1')
            
            result = cursor.fetchone()
            if result:
                # PostgreSQL RealDictCursor
                if hasattr(result, 'keys'):
                    cadastro_id = result['id']
                else:  # Tuple result
                    cadastro_id = result[0]
                logger.debug(f"ID do cadastro inserido: {cadastro_id}")
            else:
                cadastro_id = None
                logger.error("‚ùå N√£o foi poss√≠vel obter o ID do cadastro inserido")
            
            # Upload de arquivos usando a mesma conex√£o
            uploaded_files = []
            if cadastro_id:
                for file_type in ['laudo', 'receita', 'imagem']:
                    # Processar arrays de arquivos
                    files = request.files.getlist(f'{file_type}[]')
                    descriptions = request.form.getlist(f'descricao_{file_type}[]')
                    
                    for i, file in enumerate(files):
                        if file and file.filename and allowed_file(file.filename):
                            logger.debug(f"Processando arquivo: {file.filename} ({file_type})")
                            file_data = file.read()
                            descricao = descriptions[i] if i < len(descriptions) else ''
                            
                            cursor.execute('INSERT INTO arquivos_saude (cadastro_id, nome_arquivo, tipo_arquivo, arquivo_dados, descricao) VALUES (%s, %s, %s, %s, %s)', 
                                        (cadastro_id, file.filename, file_type, file_data, descricao))
                            
                            uploaded_files.append(f"{file_type}: {file.filename}")
                            logger.debug(f"Arquivo {file.filename} salvo com sucesso")
            
            # Processar dados de sa√∫de por pessoa
            if cadastro_id:
                logger.debug("Processando dados de sa√∫de por pessoa...")
                pessoas_saude = []
                
                # Buscar todos os campos de sa√∫de por pessoa
                for key in request.form.keys():
                    if key.startswith('saude_nome_'):
                        pessoa_num = key.split('_')[-1]
                        nome_pessoa = request.form.get(f'saude_nome_{pessoa_num}')
                        
                        if nome_pessoa:  # S√≥ processar se tem nome
                            # Processar checkboxes de condi√ß√µes
                            condicoes = request.form.getlist(f'saude_condicoes_{pessoa_num}[]')
                            
                            dados_pessoa = {
                                'nome_pessoa': nome_pessoa,
                                'tem_doenca_cronica': 'Sim' if 'doenca_cronica' in condicoes else 'N√£o',
                                'doencas_cronicas': request.form.get(f'saude_doencas_cronicas_{pessoa_num}', ''),
                                'usa_medicamento_continuo': 'Sim' if 'medicamento' in condicoes else 'N√£o',
                                'medicamentos': request.form.get(f'saude_medicamentos_{pessoa_num}', ''),
                                'tem_doenca_mental': 'Sim' if 'doenca_mental' in condicoes else 'N√£o',
                                'doencas_mentais': request.form.get(f'saude_doencas_mentais_{pessoa_num}', ''),
                                'tem_deficiencia': 'Sim' if 'deficiencia' in condicoes else 'N√£o',
                                'deficiencias': request.form.get(f'saude_deficiencias_{pessoa_num}', ''),
                                'precisa_cuidados_especiais': 'Sim' if 'cuidados' in condicoes else 'N√£o',
                                'cuidados_especiais': request.form.get(f'saude_cuidados_especiais_{pessoa_num}', '')
                            }
                            
                            # Inserir dados de sa√∫de da pessoa
                            cursor.execute('''
                                INSERT INTO dados_saude_pessoa (
                                    cadastro_id, nome_pessoa, tem_doenca_cronica, doencas_cronicas,
                                    usa_medicamento_continuo, medicamentos, tem_doenca_mental, doencas_mentais,
                                    tem_deficiencia, deficiencias, precisa_cuidados_especiais, cuidados_especiais
                                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                            ''', (
                                cadastro_id, dados_pessoa['nome_pessoa'], dados_pessoa['tem_doenca_cronica'],
                                dados_pessoa['doencas_cronicas'], dados_pessoa['usa_medicamento_continuo'],
                                dados_pessoa['medicamentos'], dados_pessoa['tem_doenca_mental'],
                                dados_pessoa['doencas_mentais'], dados_pessoa['tem_deficiencia'],
                                dados_pessoa['deficiencias'], dados_pessoa['precisa_cuidados_especiais'],
                                dados_pessoa['cuidados_especiais']
                            ))
                            
                            pessoas_saude.append(nome_pessoa)
                            logger.debug(f"Dados de sa√∫de salvos para: {nome_pessoa}")
                
                logger.info(f"‚úÖ Dados de sa√∫de salvos para {len(pessoas_saude)} pessoas")
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ Cadastro e arquivos salvos com sucesso no banco")
            
            if uploaded_files:
                logger.info(f"üìé Arquivos enviados: {', '.join(uploaded_files)}")
                flash(f'Cadastro realizado com sucesso! Arquivos enviados: {", ".join(uploaded_files)}')
            else:
                flash('Cadastro realizado com sucesso!')
            return redirect(url_for('dashboard'))
        
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar cadastro: {e}")
            logger.error(f"Tipo do erro: {type(e)}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            flash('Erro ao salvar cadastro. Tente novamente.')
            return redirect(url_for('cadastrar'))
    
    return render_template('cadastrar.html')

@app.route('/relatorios')
def relatorios():
    if 'usuario' not in session:
        return redirect(url_for('login'))
    return render_template('tipos_relatorios.html')

@app.route('/relatorio_completo')
def relatorio_completo():
    logger.info("üîç INICIANDO relatorio_completo")
    
    if 'usuario' not in session:
        logger.warning("‚ö†Ô∏è Usu√°rio n√£o logado tentando acessar relatorio_completo")
        return redirect(url_for('login'))
    
    # Pagina√ß√£o
    page = int(request.args.get('page', 1))
    per_page = 50  # 50 registros por p√°gina
    offset = (page - 1) * per_page
    
    try:
        logger.info("üìä Obtendo conex√£o com banco de dados...")
        conn = get_db_connection()
        cursor = conn.cursor()
        logger.info("‚úÖ Conex√£o estabelecida")
        
        # Contar total de registros
        cursor.execute('SELECT COUNT(*) FROM cadastros')
        total_records = cursor.fetchone()[0]
        total_pages = (total_records + per_page - 1) // per_page
        
        logger.info(f"üîç Executando query paginada (p√°gina {page}/{total_pages})...")
        cursor.execute('SELECT * FROM cadastros ORDER BY nome_completo LIMIT %s OFFSET %s', (per_page, offset))
        logger.info("‚úÖ Query executada com sucesso")
        
        logger.info("üìã Fazendo fetchall()...")
        cadastros = cursor.fetchall()
        logger.info(f"‚úÖ Dados obtidos: {len(cadastros)} registros encontrados")
        
        if cadastros:
            logger.info(f"üîç Primeiro registro: tipo={type(cadastros[0])}")
            logger.info(f"üîç Primeiro registro length: {len(cadastros[0]) if cadastros[0] else 'None'}")
            logger.info(f"üîç Primeiros 5 campos do primeiro registro: {cadastros[0][:5] if len(cadastros[0]) > 5 else cadastros[0]}")
        
        cursor.close()
        conn.close()
        logger.info("‚úÖ Conex√£o fechada")
        
        logger.info("üé® Renderizando template relatorio_completo.html...")
        return render_template('relatorio_completo.html', 
                             cadastros=cadastros,
                             page=page,
                             total_pages=total_pages,
                             total_records=total_records)
        
    except Exception as e:
        logger.error(f"‚ùå ERRO em relatorio_completo: {str(e)}")
        logger.error(f"‚ùå Tipo do erro: {type(e)}")
        import traceback
        logger.error(f"‚ùå Traceback completo: {traceback.format_exc()}")
        
        # Tentar fechar conex√µes se existirem
        try:
            if 'cursor' in locals():
                cursor.close()
            if 'conn' in locals():
                conn.close()
        except:
            pass
            
        flash('Erro ao carregar relat√≥rio completo. Verifique os logs.')
        return redirect(url_for('relatorios'))

@app.route('/relatorio_simplificado')
def relatorio_simplificado():
    logger.info("üîç INICIANDO relatorio_simplificado")
    
    if 'usuario' not in session:
        logger.warning("‚ö†Ô∏è Usu√°rio n√£o logado tentando acessar relatorio_simplificado")
        return redirect(url_for('login'))
    
    try:
        logger.info("üìä Obtendo conex√£o com banco de dados...")
        conn = get_db_connection()
        cursor = conn.cursor()
        logger.info("‚úÖ Conex√£o estabelecida")
        
        query = 'SELECT nome_completo, telefone, bairro, renda_familiar FROM cadastros ORDER BY nome_completo'
        logger.info(f"üîç Executando query: {query}")
        cursor.execute(query)
        logger.info("‚úÖ Query executada com sucesso")
        
        cadastros = cursor.fetchall()
        logger.info(f"‚úÖ Dados obtidos: {len(cadastros)} registros encontrados")
        
        if cadastros:
            logger.info(f"üîç Primeiro registro: {cadastros[0]}")
        
        cursor.close()
        conn.close()
        logger.info("‚úÖ Conex√£o fechada")
        
        logger.info("üé® Renderizando template relatorio_simplificado.html...")
        return render_template('relatorio_simplificado.html', cadastros=cadastros)
        
    except Exception as e:
        logger.error(f"‚ùå ERRO em relatorio_simplificado: {str(e)}")
        logger.error(f"‚ùå Tipo do erro: {type(e)}")
        import traceback
        logger.error(f"‚ùå Traceback completo: {traceback.format_exc()}")
        
        try:
            if 'cursor' in locals():
                cursor.close()
            if 'conn' in locals():
                conn.close()
        except:
            pass
            
        flash('Erro ao carregar relat√≥rio simplificado. Verifique os logs.')
        return redirect(url_for('relatorios'))

@app.route('/relatorio_estatistico')
def relatorio_estatistico():
    logger.info("üîç INICIANDO relatorio_estatistico")
    
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        logger.info("‚úÖ Conex√£o estabelecida para estat√≠stico")
        
        # Estat√≠sticas gerais
        cursor.execute('SELECT COUNT(*) FROM cadastros')
        total = cursor.fetchone()[0]
        logger.info(f"üìä Total de cadastros: {total}")
        
        # Por bairro
        cursor.execute('SELECT bairro, COUNT(*) FROM cadastros GROUP BY bairro ORDER BY COUNT(*) DESC')
        por_bairro = cursor.fetchall()
        logger.info(f"üìä Bairros encontrados: {len(por_bairro)}")
        
        # Por g√™nero
        cursor.execute('SELECT genero, COUNT(*) FROM cadastros GROUP BY genero')
        por_genero = cursor.fetchall()
        logger.info(f"üìä G√™neros encontrados: {len(por_genero)}")
        
        # Por faixa et√°ria
        cursor.execute('''SELECT 
            CASE 
                WHEN idade < 18 THEN 'Menor de 18'
                WHEN idade BETWEEN 18 AND 30 THEN '18-30 anos'
                WHEN idade BETWEEN 31 AND 50 THEN '31-50 anos'
                WHEN idade BETWEEN 51 AND 65 THEN '51-65 anos'
                ELSE 'Acima de 65'
            END as faixa_etaria,
            COUNT(*) 
            FROM cadastros 
            WHERE idade IS NOT NULL 
            GROUP BY faixa_etaria''')
        por_idade = cursor.fetchall()
        logger.info(f"üìä Faixas et√°rias encontradas: {len(por_idade)}")
        
        cursor.close()
        conn.close()
        
        stats = {
            'total': total,
            'por_bairro': por_bairro,
            'por_genero': por_genero,
            'por_idade': por_idade
        }
        
        logger.info("‚úÖ Dados estat√≠sticos preparados com sucesso")
        return render_template('relatorio_estatistico.html', stats=stats)
        
    except Exception as e:
        logger.error(f"‚ùå ERRO em relatorio_estatistico: {str(e)}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        flash('Erro ao carregar relat√≥rio estat√≠stico.')
        return redirect(url_for('relatorios'))

@app.route('/relatorio_por_bairro')
def relatorio_por_bairro():
    logger.info("üîç INICIANDO relatorio_por_bairro")
    
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        logger.info("‚úÖ Conex√£o estabelecida para relat√≥rio por bairro")
        
        # Query mais simples primeiro para testar
        cursor.execute('SELECT COUNT(*) FROM cadastros')
        total_cadastros = cursor.fetchone()[0]
        logger.info(f"üìä Total de cadastros na base: {total_cadastros}")
        
        if total_cadastros == 0:
            logger.warning("‚ö†Ô∏è Nenhum cadastro encontrado na base de dados")
            cursor.close()
            conn.close()
            return render_template('relatorio_por_bairro.html', bairros=[], erro="Nenhum cadastro encontrado")
        
        # Query principal - simplificada para testar
        query = '''SELECT bairro, COUNT(*) as total, 
                   AVG(renda_familiar) as renda_media
                   FROM cadastros 
                   WHERE bairro IS NOT NULL AND bairro != ''
                   GROUP BY bairro 
                   ORDER BY total DESC'''
        logger.info(f"üîç Executando query: {query}")
        cursor.execute(query)
        
        bairros = cursor.fetchall()
        logger.info(f"‚úÖ Bairros encontrados: {len(bairros)}")
        
        if bairros:
            logger.info(f"üîç Primeiro bairro: {bairros[0]}")
        else:
            logger.warning("‚ö†Ô∏è Nenhum bairro encontrado com dados v√°lidos")
        
        cursor.close()
        conn.close()
        
        return render_template('relatorio_por_bairro.html', bairros=bairros)
        
    except Exception as e:
        logger.error(f"‚ùå ERRO em relatorio_por_bairro: {str(e)}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return render_template('relatorio_por_bairro.html', bairros=[], erro=f"Erro: {str(e)}")
        flash('Erro ao carregar relat√≥rio por bairro.')
        return redirect(url_for('relatorios'))

@app.route('/relatorio_renda')
def relatorio_renda():
    logger.info("üîç INICIANDO relatorio_renda")
    
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        logger.info("‚úÖ Conex√£o estabelecida para relat√≥rio de renda")
        
        # Faixas de renda - simplificado
        query1 = '''SELECT 
            CASE 
                WHEN renda_familiar IS NOT NULL AND renda_familiar <= 1000 THEN 'At√© R$ 1.000'
                WHEN renda_familiar IS NOT NULL AND renda_familiar BETWEEN 1001 AND 2000 THEN 'R$ 1.001 - R$ 2.000'
                WHEN renda_familiar IS NOT NULL AND renda_familiar BETWEEN 2001 AND 3000 THEN 'R$ 2.001 - R$ 3.000'
                WHEN renda_familiar IS NOT NULL AND renda_familiar > 3000 THEN 'Acima de R$ 3.000'
                ELSE 'N√£o informado'
            END as faixa_renda,
            COUNT(*) 
            FROM cadastros 
            GROUP BY faixa_renda'''
        logger.info(f"üîç Executando query faixas de renda: {query1}")
        cursor.execute(query1)
        faixas_renda = cursor.fetchall()
        logger.info(f"‚úÖ Faixas de renda encontradas: {len(faixas_renda)}")
        
        # Renda por bairro - simplificado
        query2 = '''SELECT bairro, 
                     AVG(renda_familiar) as renda_media, 
                     COUNT(*) as total
                     FROM cadastros 
                     WHERE bairro IS NOT NULL AND bairro != ''
                     GROUP BY bairro 
                     ORDER BY renda_media DESC NULLS LAST'''
        logger.info(f"üîç Executando query renda por bairro: {query2}")
        cursor.execute(query2)
        renda_bairro = cursor.fetchall()
        logger.info(f"‚úÖ Renda por bairro encontrada: {len(renda_bairro)}")
        
        cursor.close()
        conn.close()
        
        return render_template('relatorio_renda.html', faixas_renda=faixas_renda, renda_bairro=renda_bairro)
        
    except Exception as e:
        logger.error(f"‚ùå ERRO em relatorio_renda: {str(e)}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        flash('Erro ao carregar relat√≥rio de renda.')
        return redirect(url_for('relatorios'))

@app.route('/relatorio_saude')
def relatorio_saude():
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    # Par√¢metros de filtro
    busca_nome = request.args.get('busca_nome', '').strip()
    ordem = request.args.get('ordem', 'asc')
    
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    # Estat√≠sticas usando a nova tabela dados_saude_pessoa
    cursor.execute('SELECT COUNT(DISTINCT cadastro_id) FROM dados_saude_pessoa WHERE tem_doenca_cronica = %s', ('Sim',))
    com_doenca_cronica = cursor.fetchone()['count']
    
    cursor.execute('SELECT COUNT(DISTINCT cadastro_id) FROM dados_saude_pessoa WHERE usa_medicamento_continuo = %s', ('Sim',))
    usa_medicamento = cursor.fetchone()['count']
    
    cursor.execute('SELECT COUNT(DISTINCT cadastro_id) FROM dados_saude_pessoa WHERE tem_doenca_mental = %s', ('Sim',))
    com_doenca_mental = cursor.fetchone()['count']
    
    cursor.execute('SELECT COUNT(DISTINCT cadastro_id) FROM dados_saude_pessoa WHERE tem_deficiencia = %s', ('Sim',))
    com_deficiencia = cursor.fetchone()['count']
    
    cursor.execute('SELECT COUNT(DISTINCT cadastro_id) FROM dados_saude_pessoa WHERE precisa_cuidados_especiais = %s', ('Sim',))
    precisa_cuidados = cursor.fetchone()['count']
    
    # Query principal - buscar cadastros com dados de sa√∫de e suas pessoas
    base_query = """SELECT DISTINCT c.id, c.nome_completo, c.idade, c.telefone, c.bairro
                FROM cadastros c
                INNER JOIN dados_saude_pessoa dsp ON c.id = dsp.cadastro_id
                WHERE (dsp.tem_doenca_cronica = %s OR dsp.usa_medicamento_continuo = %s 
                OR dsp.tem_doenca_mental = %s OR dsp.tem_deficiencia = %s 
                OR dsp.precisa_cuidados_especiais = %s)"""
    
    params = ['Sim', 'Sim', 'Sim', 'Sim', 'Sim']
    
    # Adicionar filtro por nome se fornecido
    if busca_nome:
        base_query += " AND LOWER(c.nome_completo) LIKE LOWER(%s)"
        params.append(f'%{busca_nome}%')
    
    # Adicionar ordena√ß√£o
    if ordem == 'desc':
        base_query += " ORDER BY c.nome_completo DESC"
    else:
        base_query += " ORDER BY c.nome_completo ASC"
    
    cursor.execute(base_query, params)
    cadastros_base = cursor.fetchall()
    
    # Para cada cadastro, buscar os dados detalhados de sa√∫de de cada pessoa
    cadastros_saude = []
    for cadastro in cadastros_base:
        cursor.execute("""SELECT nome_pessoa, tem_doenca_cronica, doencas_cronicas,
                         usa_medicamento_continuo, medicamentos, tem_doenca_mental, doencas_mentais,
                         tem_deficiencia, deficiencias, precisa_cuidados_especiais, cuidados_especiais
                         FROM dados_saude_pessoa 
                         WHERE cadastro_id = %s 
                         AND (tem_doenca_cronica = 'Sim' OR usa_medicamento_continuo = 'Sim' 
                         OR tem_doenca_mental = 'Sim' OR tem_deficiencia = 'Sim' 
                         OR precisa_cuidados_especiais = 'Sim')
                         ORDER BY nome_pessoa""", (cadastro['id'],))
        pessoas_saude = cursor.fetchall()
        
        if pessoas_saude:  # S√≥ adicionar se tem pessoas com condi√ß√µes de sa√∫de
            cadastros_saude.append({
                'cadastro': cadastro,
                'pessoas_saude': pessoas_saude
            })
    
    cursor.close()
    conn.close()
    
    stats = {
        'com_doenca_cronica': com_doenca_cronica,
        'usa_medicamento': usa_medicamento,
        'com_doenca_mental': com_doenca_mental,
        'com_deficiencia': com_deficiencia,
        'precisa_cuidados': precisa_cuidados
    }
    
    return render_template('relatorio_saude.html', stats=stats, cadastros=cadastros_saude)

@app.route('/exportar')
def exportar():
    logger.info("üöÄ FUN√á√ÉO EXPORTAR CHAMADA")
    logger.info(f"üîç Args recebidos: {dict(request.args)}")
    
    if 'usuario' not in session:
        logger.warning("‚ùå Usu√°rio n√£o logado")
        return redirect(url_for('login'))
    
    tipo = request.args.get('tipo', 'completo')
    formato = request.args.get('formato', 'csv')
    cadastro_id = request.args.get('cadastro_id')  # Para exportar cadastro individual
    
    logger.info(f"üîÑ Exportando: tipo={tipo}, formato={formato}, cadastro_id={cadastro_id}")
    
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    if tipo == 'completo':
        if cadastro_id:
            cursor.execute('SELECT * FROM cadastros WHERE id = %s', (cadastro_id,))
            dados = cursor.fetchall()
            filename = f'cadastro_{cadastro_id}'
        else:
            cursor.execute('SELECT * FROM cadastros ORDER BY nome_completo')
            dados = cursor.fetchall()
            filename = 'relatorio_completo'
    elif tipo == 'simplificado':
        cursor.execute('SELECT nome_completo, telefone, bairro, renda_familiar FROM cadastros ORDER BY nome_completo')
        dados = cursor.fetchall()
        filename = 'relatorio_simplificado'
    elif tipo == 'saude':
        if cadastro_id:
            logger.info(f"üè• Buscando dados de sa√∫de para cadastro_id={cadastro_id}")
            # Buscar cadastro espec√≠fico
            cursor.execute('SELECT id, nome_completo, idade, telefone, bairro FROM cadastros WHERE id = %s', (cadastro_id,))
            cadastro_base = cursor.fetchone()
            
            if cadastro_base:
                # Buscar dados de sa√∫de das pessoas
                cursor.execute("""SELECT nome_pessoa, tem_doenca_cronica, doencas_cronicas,
                                 usa_medicamento_continuo, medicamentos, tem_doenca_mental, doencas_mentais,
                                 tem_deficiencia, deficiencias, precisa_cuidados_especiais, cuidados_especiais
                                 FROM dados_saude_pessoa 
                                 WHERE cadastro_id = %s 
                                 AND (tem_doenca_cronica = 'Sim' OR usa_medicamento_continuo = 'Sim' 
                                 OR tem_doenca_mental = 'Sim' OR tem_deficiencia = 'Sim' 
                                 OR precisa_cuidados_especiais = 'Sim')
                                 ORDER BY nome_pessoa""", (cadastro_id,))
                pessoas_saude = cursor.fetchall()
                dados = [{'cadastro': cadastro_base, 'pessoas_saude': pessoas_saude}]
            else:
                dados = []
            filename = f'relatorio_saude_{cadastro_id}'
        else:
            logger.info("üè• Buscando todos os dados de sa√∫de")
            # Buscar todos os cadastros com dados de sa√∫de
            cursor.execute("""SELECT DISTINCT c.id, c.nome_completo, c.idade, c.telefone, c.bairro
                            FROM cadastros c
                            INNER JOIN dados_saude_pessoa dsp ON c.id = dsp.cadastro_id
                            WHERE (dsp.tem_doenca_cronica = 'Sim' OR dsp.usa_medicamento_continuo = 'Sim' 
                            OR dsp.tem_doenca_mental = 'Sim' OR dsp.tem_deficiencia = 'Sim' 
                            OR dsp.precisa_cuidados_especiais = 'Sim')
                            ORDER BY c.nome_completo""")
            cadastros_base = cursor.fetchall()
            
            dados = []
            for cadastro in cadastros_base:
                cursor.execute("""SELECT nome_pessoa, tem_doenca_cronica, doencas_cronicas,
                                 usa_medicamento_continuo, medicamentos, tem_doenca_mental, doencas_mentais,
                                 tem_deficiencia, deficiencias, precisa_cuidados_especiais, cuidados_especiais
                                 FROM dados_saude_pessoa 
                                 WHERE cadastro_id = %s 
                                 AND (tem_doenca_cronica = 'Sim' OR usa_medicamento_continuo = 'Sim' 
                                 OR tem_doenca_mental = 'Sim' OR tem_deficiencia = 'Sim' 
                                 OR precisa_cuidados_especiais = 'Sim')
                                 ORDER BY nome_pessoa""", (cadastro['id'],))
                pessoas_saude = cursor.fetchall()
                if pessoas_saude:
                    dados.append({'cadastro': cadastro, 'pessoas_saude': pessoas_saude})
            
            logger.info(f"üìä Encontrados {len(dados)} cadastros com dados de sa√∫de")
            filename = 'relatorio_saude'
    elif tipo == 'estatistico':
        # Buscar todas as estat√≠sticas como no relat√≥rio web
        cursor.execute('SELECT COUNT(*) FROM cadastros')
        total = cursor.fetchone()[0]
        
        cursor.execute('SELECT bairro, COUNT(*) FROM cadastros WHERE bairro IS NOT NULL GROUP BY bairro ORDER BY COUNT(*) DESC')
        por_bairro = cursor.fetchall()
        
        cursor.execute('SELECT genero, COUNT(*) FROM cadastros WHERE genero IS NOT NULL GROUP BY genero ORDER BY COUNT(*) DESC')
        por_genero = cursor.fetchall()
        
        cursor.execute('''SELECT 
            CASE 
                WHEN idade < 18 THEN 'Menor de 18 anos'
                WHEN idade BETWEEN 18 AND 30 THEN '18-30 anos'
                WHEN idade BETWEEN 31 AND 50 THEN '31-50 anos'
                WHEN idade BETWEEN 51 AND 65 THEN '51-65 anos'
                ELSE 'Acima de 65 anos'
            END as faixa_etaria,
            COUNT(*) 
            FROM cadastros 
            WHERE idade IS NOT NULL 
            GROUP BY faixa_etaria''')
        por_idade = cursor.fetchall()
        
        # Combinar todos os dados para exporta√ß√£o
        dados = {
            'total': total,
            'por_bairro': por_bairro,
            'por_genero': por_genero,
            'por_idade': por_idade
        }
        filename = 'relatorio_estatistico'
    elif tipo == 'bairro':
        cursor.execute('''SELECT bairro, COUNT(*) as total, 
                         AVG(renda_familiar) as renda_media
                         FROM cadastros 
                         WHERE bairro IS NOT NULL AND bairro != ''
                         GROUP BY bairro 
                         ORDER BY total DESC''')
        dados = cursor.fetchall()
        filename = 'relatorio_por_bairro'
    elif tipo == 'renda':
        # Buscar faixas de renda
        cursor.execute('''SELECT 
            CASE 
                WHEN renda_familiar IS NOT NULL AND renda_familiar <= 1000 THEN 'At√© R$ 1.000'
                WHEN renda_familiar IS NOT NULL AND renda_familiar BETWEEN 1001 AND 2000 THEN 'R$ 1.001 - R$ 2.000'
                WHEN renda_familiar IS NOT NULL AND renda_familiar BETWEEN 2001 AND 3000 THEN 'R$ 2.001 - R$ 3.000'
                WHEN renda_familiar IS NOT NULL AND renda_familiar > 3000 THEN 'Acima de R$ 3.000'
                ELSE 'N√£o informado'
            END as faixa_renda,
            COUNT(*) 
            FROM cadastros 
            GROUP BY faixa_renda''')
        faixas_renda = cursor.fetchall()
        
        # Buscar renda por bairro
        cursor.execute('''SELECT bairro, 
                         AVG(renda_familiar) as renda_media, 
                         COUNT(*) as total
                         FROM cadastros 
                         WHERE bairro IS NOT NULL AND bairro != ''
                         GROUP BY bairro 
                         ORDER BY renda_media DESC NULLS LAST''')
        renda_bairro = cursor.fetchall()
        
        # Combinar dados para exporta√ß√£o
        dados = {
            'faixas_renda': faixas_renda,
            'renda_bairro': renda_bairro
        }
        filename = 'relatorio_renda'
    elif tipo == 'caixa':
        logger.info("üí∞ Buscando dados do caixa para exporta√ß√£o")
        filtro_tipo = request.args.get('filtro_tipo')  # 'entrada' ou 'saida'
        
        # Query base
        query = '''SELECT mc.id, mc.tipo, mc.valor, mc.descricao, mc.cadastro_id, 
                   mc.nome_pessoa, mc.numero_recibo, mc.observacoes, mc.data_movimentacao, 
                   mc.usuario, c.nome_completo as titular_cadastro
                   FROM movimentacoes_caixa mc
                   LEFT JOIN cadastros c ON mc.cadastro_id = c.id'''
        
        # Adicionar filtro se especificado
        if filtro_tipo in ['entrada', 'saida']:
            query += f" WHERE mc.tipo = '{filtro_tipo}'"
            filename = f'relatorio_caixa_{filtro_tipo}'
        else:
            filename = 'relatorio_caixa'
            
        query += ' ORDER BY mc.data_movimentacao DESC'
        
        cursor.execute(query)
        dados = cursor.fetchall()
        logger.info(f"üìä Encontradas {len(dados)} movimenta√ß√µes para exporta√ß√£o")
    else:
        cursor.execute('SELECT * FROM cadastros ORDER BY nome_completo')
        dados = cursor.fetchall()
        filename = 'relatorio_geral'
    
    cursor.close()
    conn.close()
    
    if formato == 'csv':
        output = io.StringIO()
        writer = csv.writer(output)
        
        # Cabe√ßalhos baseados no tipo
        if tipo == 'simplificado':
            writer.writerow(['Nome', 'Telefone', 'Bairro', 'Renda Familiar'])
        elif tipo == 'saude':
            writer.writerow(['Titular', 'Idade', 'Telefone', 'Bairro', 'Pessoa', 'Doen√ßa Cr√¥nica', 'Doen√ßas', 
                           'Medicamento Cont√≠nuo', 'Medicamentos', 'Doen√ßa Mental', 'Doen√ßas Mentais',
                           'Defici√™ncia', 'Defici√™ncias', 'Cuidados Especiais', 'Cuidados'])
            for item in dados:
                cadastro = item['cadastro']
                for pessoa in item['pessoas_saude']:
                    writer.writerow([
                        cadastro['nome_completo'],
                        cadastro['idade'] or '',
                        cadastro['telefone'] or '',
                        cadastro['bairro'] or '',
                        pessoa['nome_pessoa'],
                        pessoa['tem_doenca_cronica'],
                        pessoa['doencas_cronicas'] or '',
                        pessoa['usa_medicamento_continuo'],
                        pessoa['medicamentos'] or '',
                        pessoa['tem_doenca_mental'],
                        pessoa['doencas_mentais'] or '',
                        pessoa['tem_deficiencia'],
                        pessoa['deficiencias'] or '',
                        pessoa['precisa_cuidados_especiais'],
                        pessoa['cuidados_especiais'] or ''
                    ])
        elif tipo == 'estatistico':
            writer.writerow(['=== RELAT√ìRIO ESTAT√çSTICO COMPLETO ==='])
            writer.writerow([''])
            writer.writerow(['TOTAL DE CADASTROS:', dados['total']])
            writer.writerow([''])
            writer.writerow(['=== POR BAIRRO ==='])
            writer.writerow(['Bairro', 'Total'])
            for row in dados['por_bairro']:
                writer.writerow([row[0] or 'N√£o informado', row[1]])
            writer.writerow([''])
            writer.writerow(['=== POR G√äNERO ==='])
            writer.writerow(['G√™nero', 'Total'])
            for row in dados['por_genero']:
                writer.writerow([row[0] or 'N√£o informado', row[1]])
            writer.writerow([''])
            writer.writerow(['=== POR FAIXA ET√ÅRIA ==='])
            writer.writerow(['Faixa Et√°ria', 'Total'])
            for row in dados['por_idade']:
                writer.writerow([row[0] or 'N√£o informado', row[1]])
        elif tipo == 'bairro':
            writer.writerow(['Bairro', 'Total de Cadastros', 'Renda M√©dia'])
        elif tipo == 'renda':
            writer.writerow(['=== AN√ÅLISE DE RENDA FAMILIAR ==='])
            writer.writerow([''])
            writer.writerow(['=== POR FAIXA DE RENDA ==='])
            writer.writerow(['Faixa de Renda', 'Total de Cadastros'])
            for row in dados['faixas_renda']:
                writer.writerow([row[0] or 'N√£o informado', row[1]])
            writer.writerow([''])
            writer.writerow(['=== RENDA POR BAIRRO ==='])
            writer.writerow(['Bairro', 'Renda M√©dia', 'Total de Cadastros'])
            for row in dados['renda_bairro']:
                writer.writerow([row[0] or 'N√£o informado', f"R$ {row[1]:.2f}" if row[1] else 'N√£o informado', row[2]])
        elif tipo == 'caixa':
            writer.writerow(['ID', 'Tipo', 'Valor', 'Descri√ß√£o', 'Titular Cadastro', 'Nome Pessoa', 
                           'N√∫mero Recibo', 'Observa√ß√µes', 'Data', 'Usu√°rio'])
            for row in dados:
                writer.writerow([
                    row['id'],
                    row['tipo'].title(),
                    f"R$ {row['valor']:.2f}",
                    row['descricao'] or '',
                    row['titular_cadastro'] or '',
                    row['nome_pessoa'] or '',
                    row['numero_recibo'] or '',
                    row['observacoes'] or '',
                    row['data_movimentacao'].strftime('%d/%m/%Y %H:%M') if row['data_movimentacao'] else '',
                    row['usuario'] or ''
                ])
        else:
            # Cabe√ßalhos completos 
            writer.writerow(['Nome', 'Telefone', 'Endere√ßo', 'N√∫mero', 'Bairro', 'CEP', 'G√™nero', 'Idade', 'CPF', 'RG', 'Estado Civil', 'Escolaridade', 'Renda Familiar'])
        
        # Dados
        for row in dados:
            if tipo == 'completo':
                # Usar √≠ndices corretos baseados na estrutura da tabela
                row_data = [
                    row[1] if hasattr(row, '__getitem__') else getattr(row, 'nome_completo', ''),  # nome_completo
                    row[6] if hasattr(row, '__getitem__') else getattr(row, 'telefone', ''),      # telefone
                    row[2] if hasattr(row, '__getitem__') else getattr(row, 'endereco', ''),      # endereco
                    row[3] if hasattr(row, '__getitem__') else getattr(row, 'numero', ''),        # numero
                    row[4] if hasattr(row, '__getitem__') else getattr(row, 'bairro', ''),        # bairro
                    row[5] if hasattr(row, '__getitem__') else getattr(row, 'cep', ''),           # cep
                    row[8] if hasattr(row, '__getitem__') else getattr(row, 'genero', ''),        # genero
                    row[9] if hasattr(row, '__getitem__') else getattr(row, 'idade', ''),         # idade
                    row[13] if hasattr(row, '__getitem__') else getattr(row, 'cpf', ''),          # cpf
                    row[14] if hasattr(row, '__getitem__') else getattr(row, 'rg', ''),           # rg
                    row[16] if hasattr(row, '__getitem__') else getattr(row, 'estado_civil', ''), # estado_civil
                    row[17] if hasattr(row, '__getitem__') else getattr(row, 'escolaridade', ''), # escolaridade
                    row[40] if hasattr(row, '__getitem__') else getattr(row, 'renda_familiar', '') # renda_familiar
                ]
            elif tipo in ['bairro', 'renda']:
                row_data = [
                    str(row[0] or 'N√£o informado'),
                    f'{row[1]:.2f}' if row[1] and len(row) > 2 else str(row[1] or ''),
                    str(row[2]) if len(row) > 2 else ''
                ]
            elif tipo == 'simplificado':
                row_data = list(row)
            elif tipo == 'saude':
                row_data = list(row)
            else:
                row_data = list(row)
            writer.writerow(row_data)
        
        output.seek(0)
        return send_file(
            io.BytesIO(output.getvalue().encode('utf-8')),
            mimetype='text/csv',
            as_attachment=True,
            download_name=f'{filename}.csv'
        )
    
    # Para PDF, usar ReportLab
    elif formato == 'pdf':
        logger.info("üìÑ Iniciando gera√ß√£o de PDF")
        from reportlab.lib.pagesizes import letter, A4
        from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
        from reportlab.lib.styles import getSampleStyleSheet
        from reportlab.lib import colors
        from reportlab.lib.units import inch
        
        logger.info("üì¶ Criando buffer e documento PDF")
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        elements = []
        styles = getSampleStyleSheet()
        
        # T√≠tulo
        logger.info(f"üìù Criando t√≠tulo para tipo={tipo}, cadastro_id={cadastro_id}")
        if tipo == 'completo':
            title = Paragraph("AMEG - Relat√≥rio Completo de Cadastros", styles['Title'])
        elif tipo == 'simplificado':
            title = Paragraph("AMEG - Relat√≥rio Simplificado", styles['Title'])
        elif tipo == 'saude':
            if cadastro_id:
                title = Paragraph("AMEG - Relat√≥rio de Sa√∫de Individual", styles['Title'])
            else:
                title = Paragraph("AMEG - Relat√≥rio de Sa√∫de", styles['Title'])
        elif tipo == 'estatistico':
            title = Paragraph("AMEG - Relat√≥rio Estat√≠stico", styles['Title'])
        elif tipo == 'bairro':
            title = Paragraph("AMEG - Relat√≥rio por Bairro", styles['Title'])
        elif tipo == 'renda':
            title = Paragraph("AMEG - An√°lise de Renda Familiar", styles['Title'])
        elif tipo == 'caixa':
            filtro_tipo = request.args.get('filtro_tipo')
            if filtro_tipo == 'entrada':
                title = Paragraph("AMEG - Relat√≥rio de Entradas do Caixa", styles['Title'])
            elif filtro_tipo == 'saida':
                title = Paragraph("AMEG - Relat√≥rio de Sa√≠das do Caixa", styles['Title'])
            else:
                title = Paragraph("AMEG - Relat√≥rio de Movimenta√ß√µes do Caixa", styles['Title'])
        else:
            title = Paragraph("AMEG - Relat√≥rio Geral", styles['Title'])
        
        logger.info("‚úÖ T√≠tulo criado, adicionando aos elementos")
        elements.append(title)
        elements.append(Spacer(1, 12))
        
        # Adicionar subt√≠tulo para relat√≥rio individual de sa√∫de
        if tipo == 'saude' and cadastro_id:
            subtitle = Paragraph(f"<i>Relat√≥rio detalhado de condi√ß√µes de sa√∫de - Cadastro ID: {cadastro_id}</i>", styles['Normal'])
            elements.append(subtitle)
            elements.append(Spacer(1, 8))
        
        # Dados da tabela
        logger.info(f"üîß Preparando dados da tabela para tipo={tipo}")
        if tipo == 'simplificado':
            logger.info("üìä Processando dados simplificados")
            table_data = [['Nome', 'Telefone', 'Bairro', 'Renda']]
            for row in dados:
                table_data.append([
                    str(row[0] or ''),
                    str(row[1] or ''),
                    str(row[2] or ''),
                    f"R$ {row[3] or '0'}" if row[3] else 'N√£o informado'
                ])
        elif tipo == 'saude':
            logger.info("üè• Processando dados de sa√∫de")
            
            # Criar m√∫ltiplas tabelas para melhor visualiza√ß√£o
            for i, row in enumerate(dados):
                logger.info(f"üìã Registro {i+1}: {dict(row) if hasattr(row, 'keys') else row}")
                
                # Extrair dados do cadastro
                cadastro = row['cadastro']
                pessoas_saude = row['pessoas_saude']
                
                # Tabela 1: Dados Pessoais
                pessoais_title = Paragraph(f"<b>üë§ {cadastro['nome_completo'] or 'N√£o informado'}</b>", styles['Heading3'])
                elements.append(pessoais_title)
                elements.append(Spacer(1, 6))
                
                pessoais_data = [
                    ['Idade', f"{cadastro['idade']} anos" if cadastro['idade'] else 'N√£o informado'],
                    ['Telefone', str(cadastro['telefone'] or 'N√£o informado')],
                    ['Bairro', str(cadastro['bairro'] or 'N√£o informado')]
                ]
                
                pessoais_table = Table(pessoais_data, colWidths=[2*inch, 4*inch])
                pessoais_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (0, -1), colors.lightblue),
                    ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                    ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                    ('LEFTPADDING', (0, 0), (-1, -1), 8),
                    ('RIGHTPADDING', (0, 0), (-1, -1), 8),
                    ('TOPPADDING', (0, 0), (-1, -1), 6),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 6)
                ]))
                elements.append(pessoais_table)
                elements.append(Spacer(1, 12))
                
                # Tabela 2: Condi√ß√µes de Sa√∫de por Pessoa
                saude_title = Paragraph("<b>üè• Condi√ß√µes de Sa√∫de por Pessoa</b>", styles['Heading3'])
                elements.append(saude_title)
                elements.append(Spacer(1, 6))
                
                # Para cada pessoa com condi√ß√µes de sa√∫de
                for j, pessoa in enumerate(pessoas_saude):
                    # Nome da pessoa
                    pessoa_title = Paragraph(f"<b>Pessoa {j+1}: {pessoa['nome_pessoa']}</b>", styles['Heading4'])
                    elements.append(pessoa_title)
                    elements.append(Spacer(1, 4))
                    
                    # Dados de sa√∫de da pessoa
                    pessoa_saude_data = []
                    
                    # Doen√ßas Cr√¥nicas
                    if pessoa['tem_doenca_cronica'] == 'Sim':
                        pessoa_saude_data.append(['Doen√ßas Cr√¥nicas', str(pessoa['doencas_cronicas'] or 'N√£o especificado')])
                    
                    # Medicamentos
                    if pessoa['usa_medicamento_continuo'] == 'Sim':
                        pessoa_saude_data.append(['Medicamentos Cont√≠nuos', str(pessoa['medicamentos'] or 'N√£o especificado')])
                    
                    # Doen√ßas Mentais
                    if pessoa['tem_doenca_mental'] == 'Sim':
                        pessoa_saude_data.append(['Condi√ß√µes Mentais', str(pessoa['doencas_mentais'] or 'N√£o especificado')])
                    
                    # Defici√™ncias
                    if pessoa['tem_deficiencia'] == 'Sim':
                        pessoa_saude_data.append(['Defici√™ncias', str(pessoa['deficiencias'] or 'N√£o especificado')])
                    
                    # Cuidados Especiais
                    if pessoa['precisa_cuidados_especiais'] == 'Sim':
                        pessoa_saude_data.append(['Cuidados Especiais', str(pessoa['cuidados_especiais'] or 'N√£o especificado')])
                    
                    if pessoa_saude_data:
                        pessoa_table = Table(pessoa_saude_data, colWidths=[2.5*inch, 4.5*inch])
                        pessoa_table.setStyle(TableStyle([
                            ('BACKGROUND', (0, 0), (0, -1), colors.lightcoral),
                            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
                            ('FONTSIZE', (0, 0), (-1, -1), 9),
                            ('GRID', (0, 0), (-1, -1), 1, colors.black),
                            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                            ('LEFTPADDING', (0, 0), (-1, -1), 8),
                            ('RIGHTPADDING', (0, 0), (-1, -1), 8),
                            ('TOPPADDING', (0, 0), (-1, -1), 6),
                            ('BOTTOMPADDING', (0, 0), (-1, -1), 6)
                        ]))
                        elements.append(pessoa_table)
                        elements.append(Spacer(1, 8))
                
                # Adicionar espa√ßo entre registros se houver mais de um
                if i < len(dados) - 1:
                    elements.append(Spacer(1, 20))
                    elements.append(Paragraph("<hr/>", styles['Normal']))
                    elements.append(Spacer(1, 20))
            
            # N√£o criar tabela adicional, pois j√° criamos as tabelas acima
            table_data = None
        elif tipo == 'estatistico':
            # Criar m√∫ltiplas tabelas para o relat√≥rio estat√≠stico completo
            from reportlab.platypus import Paragraph, Spacer
            
            # Total
            total_para = Paragraph(f"<b>Total de Cadastros: {dados['total']}</b>", styles['Heading2'])
            elements.append(total_para)
            elements.append(Spacer(1, 12))
            
            # Tentar criar gr√°ficos de pizza, se falhar usar apenas tabelas
            try:
                from reportlab.graphics.shapes import Drawing
                from reportlab.graphics.charts.piecharts import Pie
                from reportlab.lib import colors as rl_colors
                
                # Por Bairro com gr√°fico
                bairro_para = Paragraph("<b>üìç Por Bairro</b>", styles['Heading3'])
                elements.append(bairro_para)
                elements.append(Spacer(1, 6))
                
                # Gr√°fico de pizza
                drawing = Drawing(200, 150)
                pie = Pie()
                pie.x = 50
                pie.y = 25
                pie.width = 100
                pie.height = 100
                pie.data = [row[1] for row in dados['por_bairro'][:6]]  # Limitar a 6 itens
                pie.labels = [str(row[0] or 'N/A')[:10] for row in dados['por_bairro'][:6]]  # Limitar texto
                
                # Cores simples
                pie_colors = [rl_colors.blue, rl_colors.red, rl_colors.green, rl_colors.orange, rl_colors.purple, rl_colors.brown]
                for i in range(len(pie.data)):
                    pie.slices[i].fillColor = pie_colors[i % len(pie_colors)]
                
                drawing.add(pie)
                elements.append(drawing)
                elements.append(Spacer(1, 10))
                
                # Tabela de dados
                table_data = [['Bairro', 'Total']]
                for row in dados['por_bairro']:
                    table_data.append([str(row[0] or 'N√£o informado'), str(row[1])])
                
                table = Table(table_data)
                table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 8),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                elements.append(table)
                elements.append(Spacer(1, 20))
                
                # Por G√™nero com gr√°fico
                genero_para = Paragraph("<b>üë• Por G√™nero</b>", styles['Heading3'])
                elements.append(genero_para)
                elements.append(Spacer(1, 6))
                
                drawing2 = Drawing(200, 150)
                pie2 = Pie()
                pie2.x = 50
                pie2.y = 25
                pie2.width = 100
                pie2.height = 100
                pie2.data = [row[1] for row in dados['por_genero']]
                pie2.labels = [str(row[0] or 'N/A') for row in dados['por_genero']]
                
                for i in range(len(pie2.data)):
                    pie2.slices[i].fillColor = pie_colors[i % len(pie_colors)]
                
                drawing2.add(pie2)
                elements.append(drawing2)
                elements.append(Spacer(1, 10))
                
                table_data = [['G√™nero', 'Total']]
                for row in dados['por_genero']:
                    table_data.append([str(row[0] or 'N√£o informado'), str(row[1])])
                
                table = Table(table_data)
                table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 8),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                elements.append(table)
                elements.append(Spacer(1, 20))
                
                # Por Idade com gr√°fico
                idade_para = Paragraph("<b>üéÇ Por Faixa Et√°ria</b>", styles['Heading3'])
                elements.append(idade_para)
                elements.append(Spacer(1, 6))
                
                drawing3 = Drawing(200, 150)
                pie3 = Pie()
                pie3.x = 50
                pie3.y = 25
                pie3.width = 100
                pie3.height = 100
                pie3.data = [row[1] for row in dados['por_idade']]
                pie3.labels = [str(row[0] or 'N/A')[:15] for row in dados['por_idade']]
                
                for i in range(len(pie3.data)):
                    pie3.slices[i].fillColor = pie_colors[i % len(pie_colors)]
                
                drawing3.add(pie3)
                elements.append(drawing3)
                elements.append(Spacer(1, 10))
                
                table_data = [['Faixa Et√°ria', 'Total']]
                for row in dados['por_idade']:
                    table_data.append([str(row[0] or 'N√£o informado'), str(row[1])])
                
                table = Table(table_data)
                table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 8),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                elements.append(table)
                
            except Exception as e:
                # Se gr√°ficos falharem, usar apenas tabelas
                logger.error(f"Erro ao criar gr√°ficos PDF: {e}")
                
                # Por Bairro - apenas tabela
                bairro_para = Paragraph("<b>üìç Por Bairro</b>", styles['Heading3'])
                elements.append(bairro_para)
                elements.append(Spacer(1, 6))
                
                table_data = [['Bairro', 'Total']]
                for row in dados['por_bairro']:
                    table_data.append([str(row[0] or 'N√£o informado'), str(row[1])])
                
                table = Table(table_data)
                table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 8),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                elements.append(table)
                elements.append(Spacer(1, 20))
                
                # Por G√™nero - apenas tabela
                genero_para = Paragraph("<b>üë• Por G√™nero</b>", styles['Heading3'])
                elements.append(genero_para)
                elements.append(Spacer(1, 6))
                
                table_data = [['G√™nero', 'Total']]
                for row in dados['por_genero']:
                    table_data.append([str(row[0] or 'N√£o informado'), str(row[1])])
                
                table = Table(table_data)
                table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 8),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                elements.append(table)
                elements.append(Spacer(1, 20))
                
                # Por Idade - apenas tabela
                idade_para = Paragraph("<b>üéÇ Por Faixa Et√°ria</b>", styles['Heading3'])
                elements.append(idade_para)
                elements.append(Spacer(1, 6))
                
                table_data = [['Faixa Et√°ria', 'Total']]
                for row in dados['por_idade']:
                    table_data.append([str(row[0] or 'N√£o informado'), str(row[1])])
                
                table = Table(table_data)
                table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 8),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                elements.append(table)
        elif tipo == 'bairro':
            table_data = [['Bairro', 'Total de Cadastros', 'Renda M√©dia']]
            for row in dados:
                table_data.append([
                    str(row[0] or 'N√£o informado'),
                    str(row[1] or '0'),
                    f"R$ {row[2]:.2f}" if row[2] else 'N√£o informado'
                ])
        elif tipo == 'renda':
            # Por Faixa de Renda
            faixa_para = Paragraph("<b>üí∞ Por Faixa de Renda</b>", styles['Heading3'])
            elements.append(faixa_para)
            elements.append(Spacer(1, 6))
            
            table_data = [['Faixa de Renda', 'Total de Cadastros']]
            for row in dados['faixas_renda']:
                table_data.append([
                    str(row[0] or 'N√£o informado'),
                    str(row[1] or '0')
                ])
            
            table = Table(table_data)
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 8),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            elements.append(table)
            elements.append(Spacer(1, 20))
            
            # Por Bairro
            bairro_para = Paragraph("<b>üìç Renda por Bairro</b>", styles['Heading3'])
            elements.append(bairro_para)
            elements.append(Spacer(1, 6))
            
            table_data = [['Bairro', 'Renda M√©dia', 'Total de Cadastros']]
            for row in dados['renda_bairro']:
                table_data.append([
                    str(row[0] or 'N√£o informado'),
                    f"R$ {row[1]:.2f}" if row[1] else 'N√£o informado',
                    str(row[2] or '0')
                ])
            
            table = Table(table_data)
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 8),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            elements.append(table)
        elif tipo == 'caixa':
            logger.info("üí∞ Processando dados do caixa para PDF")
            filtro_tipo = request.args.get('filtro_tipo')
            
            # Calcular totais baseado no filtro
            if filtro_tipo == 'entrada':
                total_entradas = sum(row['valor'] for row in dados)
                total_saidas = 0
                saldo_total = total_entradas
            elif filtro_tipo == 'saida':
                total_saidas = sum(row['valor'] for row in dados)
                total_entradas = 0
                saldo_total = -total_saidas
            else:
                total_entradas = sum(row['valor'] for row in dados if row['tipo'] == 'entrada')
                total_saidas = sum(row['valor'] for row in dados if row['tipo'] == 'saida')
                saldo_total = total_entradas - total_saidas
            
            # Resumo financeiro
            if filtro_tipo == 'entrada':
                resumo_para = Paragraph("<b>üí∞ Resumo de Entradas</b>", styles['Heading3'])
                resumo_data = [
                    ['Total de Entradas:', f"R$ {total_entradas:.2f}"],
                    ['Quantidade de Registros:', str(len(dados))]
                ]
            elif filtro_tipo == 'saida':
                resumo_para = Paragraph("<b>üí∞ Resumo de Sa√≠das</b>", styles['Heading3'])
                resumo_data = [
                    ['Total de Sa√≠das:', f"R$ {total_saidas:.2f}"],
                    ['Quantidade de Registros:', str(len(dados))]
                ]
            else:
                resumo_para = Paragraph("<b>üí∞ Resumo Financeiro</b>", styles['Heading3'])
                resumo_data = [
                    ['Total de Entradas:', f"R$ {total_entradas:.2f}"],
                    ['Total de Sa√≠das:', f"R$ {total_saidas:.2f}"],
                    ['Saldo Atual:', f"R$ {saldo_total:.2f}"]
                ]
            
            elements.append(resumo_para)
            elements.append(Spacer(1, 6))
            
            resumo_table = Table(resumo_data, colWidths=[3*inch, 2*inch])
            resumo_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (0, -1), colors.lightblue),
                ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('ALIGN', (1, 0), (1, -1), 'RIGHT')
            ]))
            elements.append(resumo_table)
            elements.append(Spacer(1, 20))
            
            # Movimenta√ß√µes detalhadas
            if filtro_tipo == 'entrada':
                movimentacoes_para = Paragraph("<b>üìà Entradas Detalhadas</b>", styles['Heading3'])
            elif filtro_tipo == 'saida':
                movimentacoes_para = Paragraph("<b>üìâ Sa√≠das Detalhadas</b>", styles['Heading3'])
            else:
                movimentacoes_para = Paragraph("<b>üìã Movimenta√ß√µes Detalhadas</b>", styles['Heading3'])
            
            elements.append(movimentacoes_para)
            elements.append(Spacer(1, 6))
            
            table_data = [['Data', 'Tipo', 'Valor', 'Descri√ß√£o', 'Pessoa', 'Usu√°rio']]
            for row in dados:
                table_data.append([
                    row['data_movimentacao'].strftime('%d/%m/%Y') if row['data_movimentacao'] else '',
                    row['tipo'].title(),
                    f"R$ {row['valor']:.2f}",
                    str(row['descricao'] or '')[:30] + ('...' if len(str(row['descricao'] or '')) > 30 else ''),
                    str(row['nome_pessoa'] or row['titular_cadastro'] or '')[:20] + ('...' if len(str(row['nome_pessoa'] or row['titular_cadastro'] or '')) > 20 else ''),
                    str(row['usuario'] or '')
                ])
            
            table = Table(table_data, colWidths=[1*inch, 0.8*inch, 1*inch, 2*inch, 1.5*inch, 0.7*inch])
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('ALIGN', (2, 0), (2, -1), 'RIGHT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 8),
                ('FONTSIZE', (0, 1), (-1, -1), 7),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'TOP')
            ]))
            elements.append(table)
            
            # N√£o criar tabela adicional, pois j√° criamos as tabelas acima
            table_data = None
        else:  # completo
            if cadastro_id:
                # PDF detalhado para um cadastro espec√≠fico com TODOS os campos
                for row in dados:
                    # T√≠tulo do cadastro
                    nome_para = Paragraph(f"<b>Cadastro: {row['nome_completo'] or 'N√£o informado'}</b>", styles['Heading2'])
                    elements.append(nome_para)
                    elements.append(Spacer(1, 12))
                    
                    # Dados Pessoais
                    pessoais_para = Paragraph("<b>üìã Dados Pessoais</b>", styles['Heading3'])
                    elements.append(pessoais_para)
                    elements.append(Spacer(1, 6))
                    
                    pessoais_data = [
                        ['Nome Completo:', str(row['nome_completo'] or '')],
                        ['Endere√ßo:', f"{row['endereco'] or ''}, {row['numero'] or ''}"],
                        ['Bairro:', str(row['bairro'] or '')],
                        ['CEP:', str(row['cep'] or '')],
                        ['Telefone:', str(row['telefone'] or '')],
                        ['Ponto Refer√™ncia:', str(row['ponto_referencia'] or '')],
                        ['G√™nero:', str(row['genero'] or '')],
                        ['Idade:', str(row['idade'] or '')],
                        ['Data Nascimento:', str(row['data_nascimento'] or '')],
                        ['T√≠tulo Eleitor:', str(row['titulo_eleitor'] or '')],
                        ['Cidade T√≠tulo:', str(row['cidade_titulo'] or '')],
                        ['CPF:', str(row['cpf'] or '')],
                        ['RG:', str(row['rg'] or '')],
                        ['NIS:', str(row['nis'] or '')],
                        ['Estado Civil:', str(row['estado_civil'] or '')],
                        ['Escolaridade:', str(row['escolaridade'] or '')],
                        ['Profiss√£o:', str(row['profissao'] or '')]
                    ]
                    
                    pessoais_table = Table(pessoais_data, colWidths=[120, 350])
                    pessoais_table.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
                        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                        ('FONTSIZE', (0, 0), (-1, -1), 8),
                        ('GRID', (0, 0), (-1, -1), 1, colors.black)
                    ]))
                    elements.append(pessoais_table)
                    elements.append(Spacer(1, 15))
                    
                    # Dados do Companheiro
                    if row['nome_companheiro']:  # Se tem companheiro
                        comp_para = Paragraph("<b>üíë Dados do Companheiro(a)</b>", styles['Heading3'])
                        elements.append(comp_para)
                        elements.append(Spacer(1, 6))
                        
                        comp_data = [
                            ['Nome Companheiro:', str(row['nome_companheiro'] or '')],
                            ['CPF Companheiro:', str(row['cpf_companheiro'] or '')],
                            ['RG Companheiro:', str(row['rg_companheiro'] or '')],
                            ['Idade Companheiro:', str(row['idade_companheiro'] or '')],
                            ['Escolaridade Companheiro:', str(row['escolaridade_companheiro'] or '')],
                            ['Profiss√£o Companheiro:', str(row['profissao_companheiro'] or '')],
                            ['Data Nasc. Companheiro:', str(row['data_nascimento_companheiro'] or '')],
                            ['T√≠tulo Companheiro:', str(row['titulo_companheiro'] or '')],
                            ['Cidade T√≠tulo Comp.:', str(row['cidade_titulo_companheiro'] or '')],
                            ['NIS Companheiro:', str(row['nis_companheiro'] or '')]
                        ]
                        
                        comp_table = Table(comp_data, colWidths=[120, 350])
                        comp_table.setStyle(TableStyle([
                            ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
                            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                            ('FONTSIZE', (0, 0), (-1, -1), 8),
                            ('GRID', (0, 0), (-1, -1), 1, colors.black)
                        ]))
                        elements.append(comp_table)
                        elements.append(Spacer(1, 15))
                    
                    # Dados Familiares e Trabalho
                    familia_para = Paragraph("<b>üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Dados Familiares e Trabalho</b>", styles['Heading3'])
                    elements.append(familia_para)
                    elements.append(Spacer(1, 6))
                    
                    familia_data = [
                        ['Tipo Trabalho:', str(row['tipo_trabalho'] or '')],
                        ['Pessoas Trabalham:', str(row['pessoas_trabalham'] or '')],
                        ['Aposentados/Pensionistas:', str(row['aposentados_pensionistas'] or '')],
                        ['Pessoas na Fam√≠lia:', str(row['num_pessoas_familia'] or '')],
                        ['N√∫mero Fam√≠lias:', str(row['num_familias'] or '')],
                        ['Adultos:', str(row['adultos'] or '')],
                        ['Crian√ßas:', str(row['criancas'] or '')],
                        ['Adolescentes:', str(row['adolescentes'] or '')],
                        ['Idosos:', str(row['idosos'] or '')],
                        ['Gestantes:', str(row['gestantes'] or '')],
                        ['Nutrizes:', str(row['nutrizes'] or '')],
                        ['Renda Familiar:', f"R$ {row['renda_familiar'] or '0'}"],
                        ['Renda Per Capita:', f"R$ {row['renda_per_capita'] or '0'}"],
                        ['Bolsa Fam√≠lia:', f"R$ {row['bolsa_familia'] or '0'}"]
                    ]
                    
                    familia_table = Table(familia_data, colWidths=[120, 350])
                    familia_table.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
                        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                        ('FONTSIZE', (0, 0), (-1, -1), 8),
                        ('GRID', (0, 0), (-1, -1), 1, colors.black)
                    ]))
                    elements.append(familia_table)
                    elements.append(Spacer(1, 15))
                    
                    # Dados Habitacionais
                    casa_para = Paragraph("<b>üè† Dados Habitacionais</b>", styles['Heading3'])
                    elements.append(casa_para)
                    elements.append(Spacer(1, 6))
                    
                    casa_data = [
                        ['Tipo Casa:', str(row['casa_tipo'] or '')],
                        ['Material Casa:', str(row['casa_material'] or '')],
                        ['Energia:', str(row['energia'] or '')],
                        ['Lixo:', str(row['lixo'] or '')],
                        ['√Ågua:', str(row['agua'] or '')],
                        ['Esgoto:', str(row['esgoto'] or '')]
                    ]
                    
                    casa_table = Table(casa_data, colWidths=[120, 350])
                    casa_table.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
                        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                        ('FONTSIZE', (0, 0), (-1, -1), 8),
                        ('GRID', (0, 0), (-1, -1), 1, colors.black)
                    ]))
                    elements.append(casa_table)
                    elements.append(Spacer(1, 15))
                    
                    # Dados de Sa√∫de
                    saude_para = Paragraph("<b>üè• Dados de Sa√∫de</b>", styles['Heading3'])
                    elements.append(saude_para)
                    elements.append(Spacer(1, 6))
                    
                    saude_data = [
                        ['Doen√ßa Cr√¥nica:', str(row[49] or '')],
                        ['Quais Doen√ßas:', str(row[50] or '')],
                        ['Medicamento Cont√≠nuo:', str(row[51] or '')],
                        ['Quais Medicamentos:', str(row[52] or '')],
                        ['Doen√ßa Mental:', str(row[53] or '')],
                        ['Quais Doen√ßas Mentais:', str(row[54] or '')],
                        ['Defici√™ncia:', str(row[55] or '')],
                        ['Tipo Defici√™ncia:', str(row[56] or '')],
                        ['Cuidados Especiais:', str(row[57] or '')],
                        ['Quais Cuidados:', str(row[58] or '')]
                    ]
                    
                    saude_table = Table(saude_data, colWidths=[120, 350])
                    saude_table.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
                        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                        ('FONTSIZE', (0, 0), (-1, -1), 8),
                        ('GRID', (0, 0), (-1, -1), 1, colors.black)
                    ]))
                    elements.append(saude_table)
                    
                    # Observa√ß√µes
                    if len(row) > 59 and row[59]:
                        elements.append(Spacer(1, 15))
                        obs_para = Paragraph("<b>üìù Observa√ß√µes</b>", styles['Heading3'])
                        elements.append(obs_para)
                        elements.append(Spacer(1, 6))
                        obs_text = Paragraph(str(row[59] or ''), styles['Normal'])
                        elements.append(obs_text)
            else:
                # Tabela resumida para todos os cadastros
                table_data = [['Nome', 'Telefone', 'Bairro', 'Idade', 'Renda']]
                for row in dados:
                    table_data.append([
                        str(row[1] if hasattr(row, '__getitem__') else getattr(row, 'nome_completo', '')),
                        str(row[6] if hasattr(row, '__getitem__') else getattr(row, 'telefone', '')),
                        str(row[4] if hasattr(row, '__getitem__') else getattr(row, 'bairro', '')),
                        str(row[9] if hasattr(row, '__getitem__') else getattr(row, 'idade', '')),
                        f"R$ {row[40] or '0'}" if (hasattr(row, '__getitem__') and row[40]) else 'N√£o informado'
                    ])
        
        # Criar tabela (exceto para estat√≠stico, renda, cadastro completo individual e sa√∫de que j√° criou suas tabelas)
        logger.info(f"üîß Verificando se deve criar tabela: tipo={tipo}, cadastro_id={cadastro_id}, table_data={table_data is not None}")
        if table_data is not None and tipo not in ['estatistico', 'renda'] and not (tipo == 'completo' and cadastro_id):
            logger.info(f"üìä Criando tabela com {len(table_data)} linhas")
            logger.info(f"üìã Cabe√ßalho da tabela: {table_data[0] if table_data else 'Vazio'}")
            table = Table(table_data)
            
            # Estilo espec√≠fico para relat√≥rio de sa√∫de com mais colunas
            if tipo == 'saude':
                logger.info("üé® Aplicando estilo para tabela de sa√∫de")
                # Definir larguras das colunas para melhor layout
                col_widths = [2.2*inch, 0.8*inch, 1.2*inch, 1.2*inch, 1.8*inch, 1.8*inch, 1.5*inch, 1.5*inch, 1.5*inch]
                table = Table(table_data, colWidths=col_widths)
                table.setStyle(TableStyle([
                    # Cabe√ßalho
                    ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                    ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 9),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 10),
                    ('TOPPADDING', (0, 0), (-1, 0), 10),
                    
                    # Dados
                    ('ALIGN', (0, 1), (0, -1), 'LEFT'),    # Nome - esquerda
                    ('ALIGN', (1, 1), (1, -1), 'CENTER'),  # Idade - centro
                    ('ALIGN', (2, 1), (2, -1), 'CENTER'),  # Telefone - centro
                    ('ALIGN', (3, 1), (3, -1), 'LEFT'),    # Bairro - esquerda
                    ('ALIGN', (4, 1), (-1, -1), 'LEFT'),   # Campos de sa√∫de - esquerda
                    
                    ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 1), (-1, -1), 8),
                    ('TOPPADDING', (0, 1), (-1, -1), 6),
                    ('BOTTOMPADDING', (0, 1), (-1, -1), 6),
                    ('LEFTPADDING', (0, 0), (-1, -1), 4),
                    ('RIGHTPADDING', (0, 0), (-1, -1), 4),
                    
                    # Cores alternadas nas linhas
                    ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                    ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey]),
                    
                    # Bordas
                    ('GRID', (0, 0), (-1, -1), 1, colors.black),
                    ('LINEBELOW', (0, 0), (-1, 0), 2, colors.darkblue),
                    
                    # Quebra de linha e alinhamento vertical
                    ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                    ('WORDWRAP', (0, 0), (-1, -1), True)
                ]))
            else:
                logger.info("üé® Aplicando estilo padr√£o para tabela")
                table = Table(table_data)
                table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 10),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
            logger.info("‚úÖ Adicionando tabela aos elementos do PDF")
            elements.append(table)
        else:
            logger.info(f"‚ö†Ô∏è Tabela N√ÉO ser√° criada: tipo={tipo}, cadastro_id={cadastro_id}, condi√ß√£o: {tipo not in ['estatistico', 'renda'] and not (tipo == 'completo' and cadastro_id)}")
        
        logger.info(f"üî® Construindo PDF com {len(elements)} elementos")
        doc.build(elements)
        
        buffer.seek(0)
        logger.info(f"‚úÖ PDF gerado com sucesso: {filename}.pdf")
        return send_file(
            buffer,
            mimetype='application/pdf',
            as_attachment=True,
            download_name=f'{filename}.pdf'
        )
    
    # Fallback - n√£o deveria chegar aqui
    flash('Formato de exporta√ß√£o n√£o suportado.')
    return redirect(url_for('relatorios'))

@app.route('/arquivos_saude/<int:cadastro_id>')
def arquivos_saude(cadastro_id):
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    conn = get_db_connection()
    c = cursor = conn[0].cursor() if isinstance(conn, tuple) else conn.cursor()
    
    c.execute('SELECT nome_completo FROM cadastros WHERE id = %s', (cadastro_id,))
    cadastro = c.fetchone()
    
    c.execute('SELECT * FROM arquivos_saude WHERE cadastro_id = %s ORDER BY data_upload DESC', (cadastro_id,))
    arquivos = c.fetchall()
    
    conn.close()
    
    if not cadastro:
        flash('Cadastro n√£o encontrado!')
        return redirect(url_for('relatorio_saude'))
    
    return render_template('arquivos_saude.html', cadastro=cadastro, arquivos=arquivos, cadastro_id=cadastro_id)

@app.route('/download_arquivo/<int:arquivo_id>')
def download_arquivo(arquivo_id):
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        cursor.execute('SELECT nome_arquivo, arquivo_dados, tipo_arquivo FROM arquivos_saude WHERE id = %s', (arquivo_id,))
        arquivo = cursor.fetchone()
        cursor.close()
        conn.close()
        
        if not arquivo or not arquivo['arquivo_dados']:
            flash('Arquivo n√£o encontrado!')
            return redirect(url_for('arquivos_cadastros'))
        
        # Criar um objeto BytesIO com os dados do arquivo
        file_data = io.BytesIO(arquivo['arquivo_dados'])
        
        return send_file(
            file_data,
            as_attachment=True,
            download_name=arquivo['nome_arquivo'],
            mimetype='application/octet-stream'
        )
        
    except Exception as e:
        logger.error(f"Erro ao baixar arquivo {arquivo_id}: {e}")
        flash('Erro ao baixar arquivo!')
        return redirect(url_for('arquivos_cadastros'))

@app.route('/upload_arquivo/<int:cadastro_id>', methods=['POST'])
def upload_arquivo(cadastro_id):
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    if 'arquivo' not in request.files:
        flash('Nenhum arquivo selecionado!')
        return redirect(url_for('arquivos_saude', cadastro_id=cadastro_id))
    
    file = request.files['arquivo']
    if file.filename == '':
        flash('Nenhum arquivo selecionado!')
        return redirect(url_for('arquivos_saude', cadastro_id=cadastro_id))
    
    if file and allowed_file(file.filename):
        file_data = file.read()
        
        conn = get_db_connection()
        c = cursor = conn[0].cursor() if isinstance(conn, tuple) else conn.cursor()
        c.execute('INSERT INTO arquivos_saude (cadastro_id, nome_arquivo, tipo_arquivo, arquivo_dados, descricao) VALUES (%s, %s, %s, %s, %s)', 
                (cadastro_id, file.filename, request.form.get('tipo_arquivo'), file_data, request.form.get('descricao')))
        conn.commit()
        conn.close()
        
        flash('Arquivo enviado com sucesso!')
    else:
        flash('Tipo de arquivo n√£o permitido! Use: PDF, PNG, JPG, DOC, DOCX')
    
    return redirect(url_for('arquivos_saude', cadastro_id=cadastro_id))

@app.route('/usuarios')
def usuarios():
    if 'usuario' not in session:
        return redirect(url_for('login'))
    if not is_admin_user(session['usuario']):
        flash('Acesso negado! Apenas administradores podem gerenciar usu√°rios.')
        return redirect(url_for('dashboard'))
    
    logger.info("üìã Carregando lista de usu√°rios...")
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('SELECT id, usuario, COALESCE(tipo, \'usuario\') as tipo FROM usuarios ORDER BY usuario')
        usuarios_lista = cursor.fetchall()
        
        logger.debug(f"Encontrados {len(usuarios_lista)} usu√°rios")
        
        cursor.close()
        conn.close()
        
        return render_template('usuarios.html', usuarios=usuarios_lista)
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar usu√°rios: {e}")
        flash('Erro ao carregar lista de usu√°rios.')
        return render_template('usuarios.html', usuarios=[])

@app.route('/criar_usuario')
def criar_usuario():
    if 'usuario' not in session:
        return redirect(url_for('login'))
    if session['usuario'] != 'admin':
        flash('Acesso negado! Apenas administradores podem criar usu√°rios.')
        return redirect(url_for('dashboard'))
    return render_template('criar_usuario.html')

def validar_senha(senha):
    """Valida se a senha atende aos requisitos de seguran√ßa"""
    import re
    
    if len(senha) < 8:
        return False, "Senha deve ter pelo menos 8 caracteres"
    
    if not re.search(r'[A-Z]', senha):
        return False, "Senha deve conter pelo menos uma letra mai√∫scula"
    
    if not re.search(r'[a-z]', senha):
        return False, "Senha deve conter pelo menos uma letra min√∫scula"
    
    if not re.search(r'[0-9]', senha):
        return False, "Senha deve conter pelo menos um n√∫mero"
    
    return True, "Senha v√°lida"

@app.route('/criar_usuario', methods=['POST'])
def salvar_usuario():
    if 'usuario' not in session:
        return redirect(url_for('login'))
    if session['usuario'] != 'admin':
        flash('Acesso negado! Apenas administradores podem criar usu√°rios.')
        return redirect(url_for('dashboard'))
    
    novo_usuario = request.form['usuario']
    nova_senha = request.form['senha']
    tipo_usuario = request.form.get('tipo', 'usuario')
    
    # Validar senha
    senha_valida, mensagem = validar_senha(nova_senha)
    if not senha_valida:
        flash(f'Erro na senha: {mensagem}')
        return redirect(url_for('criar_usuario'))
    
    logger.info(f"üë§ Criando novo usu√°rio: {novo_usuario} (tipo: {tipo_usuario})")
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        # Verificar se usu√°rio j√° existe
        logger.debug("Verificando se usu√°rio j√° existe...")
        cursor.execute('SELECT id FROM usuarios WHERE usuario = %s', (novo_usuario,))
        existing_user = cursor.fetchone()
        
        if existing_user:
            logger.warning(f"‚ö†Ô∏è Usu√°rio {novo_usuario} j√° existe")
            flash(f'Usu√°rio "{novo_usuario}" j√° existe!')
            cursor.close()
            conn.close()
            return redirect(url_for('usuarios'))
        
        senha_hash = generate_password_hash(nova_senha)
        logger.debug("Hash da senha gerado")
        
        # No Railway sempre ser√° PostgreSQL
        cursor.execute('INSERT INTO usuarios (usuario, senha, tipo) VALUES (%s, %s, %s) RETURNING id', (novo_usuario, senha_hash, tipo_usuario))
        usuario_id = cursor.fetchone()[0]
        logger.debug("Query INSERT executada")
        
        # Processar permiss√µes adicionais
        permissoes = request.form.getlist('permissoes')
        logger.info(f"Permiss√µes selecionadas: {permissoes}")
        
        for permissao in permissoes:
            adicionar_permissao_usuario(usuario_id, permissao)
            logger.info(f"Permiss√£o '{permissao}' adicionada ao usu√°rio {novo_usuario}")
        
        conn.commit()
        logger.info(f"‚úÖ Usu√°rio {novo_usuario} criado com sucesso!")
        flash('Usu√°rio criado com sucesso!')
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar usu√°rio {novo_usuario}: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        flash(f'Erro ao criar usu√°rio: {str(e)}')
    
    cursor.close()
    conn.close()
    return redirect(url_for('usuarios'))

@app.route('/excluir_usuario/<int:usuario_id>')
def excluir_usuario(usuario_id):
    if 'usuario' not in session:
        return redirect(url_for('login'))
    if not is_admin_user(session['usuario']):
        flash('Acesso negado! Apenas administradores podem excluir usu√°rios.')
        return redirect(url_for('dashboard'))
    
    # Prote√ß√£o especial para admin ID 1
    if usuario_id == 1:
        flash('Erro! O usu√°rio admin principal (ID 1) n√£o pode ser exclu√≠do.')
        return redirect(url_for('usuarios'))
    
    logger.info(f"üóëÔ∏è Tentando excluir usu√°rio ID: {usuario_id}")
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Verificar se √© o admin
        cursor.execute('SELECT usuario FROM usuarios WHERE id = %s', (usuario_id,))
        user_data = cursor.fetchone()
        
        if not user_data:
            logger.warning(f"‚ö†Ô∏è Usu√°rio ID {usuario_id} n√£o encontrado")
            flash('Usu√°rio n√£o encontrado!')
            cursor.close()
            conn.close()
            return redirect(url_for('usuarios'))
        
        username = user_data[0] if isinstance(user_data, tuple) else user_data['usuario']
        
        if username == 'admin':
            logger.warning("‚ö†Ô∏è Tentativa de excluir usu√°rio admin bloqueada")
            flash('N√£o √© poss√≠vel excluir o usu√°rio admin!')
            cursor.close()
            conn.close()
            return redirect(url_for('usuarios'))
        
        # Excluir usu√°rio
        cursor.execute('DELETE FROM usuarios WHERE id = %s', (usuario_id,))
        usuarios_deletados = cursor.rowcount
        
        if usuarios_deletados > 0:
            conn.commit()
            logger.info(f"‚úÖ Usu√°rio {username} (ID: {usuario_id}) exclu√≠do com sucesso")
            flash(f'Usu√°rio "{username}" exclu√≠do com sucesso!')
        else:
            logger.warning(f"‚ö†Ô∏è Nenhum usu√°rio foi exclu√≠do (ID: {usuario_id})")
            flash('Erro: Usu√°rio n√£o foi exclu√≠do.')
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao excluir usu√°rio ID {usuario_id}: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        flash(f'Erro ao excluir usu√°rio: {str(e)}')
    
    return redirect(url_for('usuarios'))

@app.route('/promover_usuario/<int:usuario_id>')
def promover_usuario(usuario_id):
    if 'usuario' not in session:
        return redirect(url_for('login'))
    if not is_admin_user(session['usuario']):
        flash('Acesso negado! Apenas administradores podem promover usu√°rios.')
        return redirect(url_for('dashboard'))
    
    # Prote√ß√£o especial para admin ID 1
    if usuario_id == 1:
        flash('O usu√°rio admin principal (ID 1) j√° possui privil√©gios m√°ximos.')
        return redirect(url_for('usuarios'))
    
    logger.info(f"üëë Tentando promover usu√°rio ID: {usuario_id}")
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Verificar se usu√°rio existe
        cursor.execute('SELECT usuario, tipo FROM usuarios WHERE id = %s', (usuario_id,))
        user_data = cursor.fetchone()
        
        if not user_data:
            logger.warning(f"‚ö†Ô∏è Usu√°rio ID {usuario_id} n√£o encontrado")
            flash('Usu√°rio n√£o encontrado!')
            cursor.close()
            conn.close()
            return redirect(url_for('usuarios'))
        
        username = user_data[0]
        tipo_atual = user_data[1] if len(user_data) > 1 else 'usuario'
        
        if tipo_atual == 'admin':
            logger.warning(f"‚ö†Ô∏è Usu√°rio {username} j√° √© administrador")
            flash(f'Usu√°rio "{username}" j√° √© administrador!')
            cursor.close()
            conn.close()
            return redirect(url_for('usuarios'))
        
        # Promover usu√°rio a admin
        cursor.execute('UPDATE usuarios SET tipo = %s WHERE id = %s', ('admin', usuario_id))
        usuarios_atualizados = cursor.rowcount
        
        if usuarios_atualizados > 0:
            conn.commit()
            logger.info(f"‚úÖ Usu√°rio {username} (ID: {usuario_id}) promovido a administrador")
            flash(f'Usu√°rio "{username}" promovido a administrador com sucesso!')
        else:
            logger.warning(f"‚ö†Ô∏è Nenhum usu√°rio foi atualizado (ID: {usuario_id})")
            flash('Erro: Usu√°rio n√£o foi promovido.')
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao promover usu√°rio ID {usuario_id}: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        flash(f'Erro ao promover usu√°rio: {str(e)}')
    
    return redirect(url_for('usuarios'))

@app.route('/rebaixar_usuario/<int:usuario_id>')
def rebaixar_usuario(usuario_id):
    if 'usuario' not in session:
        return redirect(url_for('login'))
    if not is_admin_user(session['usuario']):
        flash('Acesso negado! Apenas administradores podem rebaixar usu√°rios.')
        return redirect(url_for('dashboard'))
    
    # Prote√ß√£o especial para admin ID 1
    if usuario_id == 1:
        flash('Erro! O usu√°rio admin principal (ID 1) n√£o pode ser rebaixado.')
        return redirect(url_for('usuarios'))
    
    logger.info(f"üë§ Tentando rebaixar usu√°rio ID: {usuario_id}")
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Verificar se usu√°rio existe
        cursor.execute('SELECT usuario, tipo FROM usuarios WHERE id = %s', (usuario_id,))
        user_data = cursor.fetchone()
        
        if not user_data:
            logger.warning(f"‚ö†Ô∏è Usu√°rio ID {usuario_id} n√£o encontrado")
            flash('Usu√°rio n√£o encontrado!')
            cursor.close()
            conn.close()
            return redirect(url_for('usuarios'))
        
        username = user_data[0]
        tipo_atual = user_data[1] if len(user_data) > 1 else 'usuario'
        
        if username == 'admin':
            logger.warning("‚ö†Ô∏è Tentativa de rebaixar usu√°rio admin principal bloqueada")
            flash('N√£o √© poss√≠vel rebaixar o usu√°rio admin principal!')
            cursor.close()
            conn.close()
            return redirect(url_for('usuarios'))
        
        if tipo_atual == 'usuario':
            logger.warning(f"‚ö†Ô∏è Usu√°rio {username} j√° √© usu√°rio comum")
            flash(f'Usu√°rio "{username}" j√° √© usu√°rio comum!')
            cursor.close()
            conn.close()
            return redirect(url_for('usuarios'))
        
        # Rebaixar usu√°rio para comum
        cursor.execute('UPDATE usuarios SET tipo = %s WHERE id = %s', ('usuario', usuario_id))
        usuarios_atualizados = cursor.rowcount
        
        if usuarios_atualizados > 0:
            conn.commit()
            logger.info(f"‚úÖ Usu√°rio {username} (ID: {usuario_id}) rebaixado a usu√°rio comum")
            flash(f'Usu√°rio "{username}" rebaixado a usu√°rio comum!')
        else:
            logger.warning(f"‚ö†Ô∏è Nenhum usu√°rio foi atualizado (ID: {usuario_id})")
            flash('Erro: Usu√°rio n√£o foi rebaixado.')
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao rebaixar usu√°rio ID {usuario_id}: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        flash(f'Erro ao rebaixar usu√°rio: {str(e)}')
    
    return redirect(url_for('usuarios'))

@app.route('/editar_usuario/<int:usuario_id>', methods=['GET', 'POST'])
def editar_usuario(usuario_id):
    if 'usuario' not in session:
        return redirect(url_for('login'))
    if not is_admin_user(session['usuario']):
        flash('Acesso negado! Apenas administradores podem editar usu√°rios.')
        return redirect(url_for('dashboard'))
    
    # Prote√ß√£o especial para admin ID 1
    if usuario_id == 1:
        # Buscar dados do usu√°rio admin para verificar
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT usuario FROM usuarios WHERE id = 1')
        admin_data = cursor.fetchone()
        cursor.close()
        conn.close()
        
        if admin_data and session['usuario'] != admin_data[0]:
            flash('Acesso negado! Apenas o pr√≥prio usu√°rio admin pode alterar sua senha.')
            return redirect(url_for('usuarios'))
    
    logger.info(f"‚úèÔ∏è Editando usu√°rio ID: {usuario_id}")
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        if request.method == 'GET':
            # Buscar dados do usu√°rio
            cursor.execute('SELECT id, usuario, COALESCE(tipo, \'usuario\') as tipo FROM usuarios WHERE id = %s', (usuario_id,))
            user_data = cursor.fetchone()
            
            if not user_data:
                flash('Usu√°rio n√£o encontrado!')
                cursor.close()
                conn.close()
                return redirect(url_for('usuarios'))
            
            # Buscar permiss√µes do usu√°rio
            permissoes_usuario = obter_permissoes_usuario(usuario_id)
            
            cursor.close()
            conn.close()
            return render_template('editar_usuario.html', 
                                 usuario=user_data, 
                                 permissoes_usuario=permissoes_usuario)
        
        elif request.method == 'POST':
            # Processar edi√ß√£o
            novo_tipo = request.form.get('tipo', 'usuario')
            nova_senha = request.form.get('nova_senha', '').strip()
            
            # Buscar dados atuais
            cursor.execute('SELECT usuario, tipo FROM usuarios WHERE id = %s', (usuario_id,))
            user_data = cursor.fetchone()
            
            if not user_data:
                flash('Usu√°rio n√£o encontrado!')
                cursor.close()
                conn.close()
                return redirect(url_for('usuarios'))
            
            username = user_data[0]
            
            # Proteger admin principal
            if username == 'admin' and novo_tipo != 'admin':
                flash('N√£o √© poss√≠vel alterar o tipo do usu√°rio admin principal!')
                cursor.close()
                conn.close()
                return redirect(url_for('usuarios'))
            
            # Atualizar tipo
            cursor.execute('UPDATE usuarios SET tipo = %s WHERE id = %s', (novo_tipo, usuario_id))
            logger.info(f"‚úÖ Tipo do usu√°rio {username} atualizado para {novo_tipo}")
            
            # Processar permiss√µes adicionais
            permissoes_atuais = obter_permissoes_usuario(usuario_id)
            permissoes_novas = request.form.getlist('permissoes')
            
            # Remover permiss√µes que n√£o est√£o mais selecionadas
            for permissao in permissoes_atuais:
                if permissao not in permissoes_novas:
                    remover_permissao_usuario(usuario_id, permissao)
                    logger.info(f"Permiss√£o '{permissao}' removida do usu√°rio {username}")
            
            # Adicionar novas permiss√µes
            for permissao in permissoes_novas:
                if permissao not in permissoes_atuais:
                    adicionar_permissao_usuario(usuario_id, permissao)
                    logger.info(f"Permiss√£o '{permissao}' adicionada ao usu√°rio {username}")
            
            # Atualizar senha se fornecida
            if nova_senha:
                senha_hash = generate_password_hash(nova_senha)
                cursor.execute('UPDATE usuarios SET senha = %s WHERE id = %s', (senha_hash, usuario_id))
                logger.info(f"‚úÖ Senha do usu√°rio {username} atualizada")
            
            conn.commit()
            cursor.close()
            conn.close()
            
            flash(f'Usu√°rio "{username}" atualizado com sucesso!')
            return redirect(url_for('usuarios'))
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao editar usu√°rio ID {usuario_id}: {e}")
        flash(f'Erro ao editar usu√°rio: {str(e)}')
        return redirect(url_for('usuarios'))

@app.route('/editar_cadastro/<int:cadastro_id>')
def editar_cadastro(cadastro_id):
    if 'usuario' not in session:
        logger.debug("Usu√°rio n√£o logado tentando acessar /editar_cadastro")
        return redirect(url_for('login'))
    
    logger.info(f"üìù Carregando cadastro para edi√ß√£o: ID {cadastro_id}")
    try:
        conn = get_db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        logger.debug(f"Buscando cadastro ID {cadastro_id}")
        
        cursor.execute('SELECT *, foto_base64 FROM cadastros WHERE id = %s', (cadastro_id,))
        
        cadastro = cursor.fetchone()
        logger.debug(f"Cadastro encontrado: {cadastro is not None}")
        
        if cadastro:
            foto_presente = cadastro.get('foto_base64') is not None
            foto_tamanho = len(cadastro.get('foto_base64', '')) if cadastro.get('foto_base64') else 0
            logger.debug(f"Foto presente: {foto_presente}")
            logger.debug(f"Tamanho da foto: {foto_tamanho} caracteres")
            if foto_presente and foto_tamanho > 0:
                logger.debug(f"Primeiros 50 chars da foto: {cadastro.get('foto_base64', '')[:50]}...")
            else:
                logger.warning("‚ö†Ô∏è Campo foto_base64 est√° vazio ou nulo")
        
        # Buscar arquivos de sa√∫de associados
        arquivos_saude = []
        dados_saude_pessoas = []
        if cadastro:
            logger.debug("Buscando arquivos de sa√∫de...")
            cursor.execute('SELECT id, nome_arquivo, tipo_arquivo, descricao, data_upload FROM arquivos_saude WHERE cadastro_id = %s ORDER BY data_upload DESC', (cadastro_id,))
            arquivos_saude = cursor.fetchall()
            logger.debug(f"Arquivos encontrados: {len(arquivos_saude)}")
            
            # Buscar dados de sa√∫de por pessoa
            logger.debug("Buscando dados de sa√∫de por pessoa...")
            cursor.execute('SELECT * FROM dados_saude_pessoa WHERE cadastro_id = %s ORDER BY id', (cadastro_id,))
            dados_saude_pessoas = cursor.fetchall()
            logger.debug(f"Dados de sa√∫de encontrados para {len(dados_saude_pessoas)} pessoas")
            logger.debug(f"Encontrados {len(arquivos_saude)} arquivos de sa√∫de")
        
        cursor.close()
        conn.close()
        logger.info("‚úÖ Cadastro e arquivos carregados para edi√ß√£o")
        
        if not cadastro:
            logger.warning(f"‚ö†Ô∏è Cadastro ID {cadastro_id} n√£o encontrado")
            flash('Cadastro n√£o encontrado!')
            return redirect(url_for('dashboard'))
        
        return render_template('editar_cadastro.html', cadastro=cadastro, arquivos_saude=arquivos_saude, dados_saude_pessoas=dados_saude_pessoas)
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar cadastro para edi√ß√£o: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        flash('Erro ao carregar cadastro.')
        return redirect(url_for('dashboard'))

@app.route('/excluir_arquivo/<int:arquivo_id>')
def excluir_arquivo(arquivo_id):
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Buscar o cadastro_id antes de excluir
        cursor.execute('SELECT cadastro_id FROM arquivos_saude WHERE id = %s', (arquivo_id,))
        
        result = cursor.fetchone()
        if not result:
            flash('Arquivo n√£o encontrado!')
            return redirect(url_for('dashboard'))
        
        cadastro_id = result[0] if isinstance(result, tuple) else result['cadastro_id']
        
        # Excluir o arquivo
        cursor.execute('DELETE FROM arquivos_saude WHERE id = %s', (arquivo_id,))
        
        conn.commit()
        cursor.close()
        conn.close()
        
        flash('Arquivo exclu√≠do com sucesso!')
        return redirect(url_for('editar_cadastro', cadastro_id=cadastro_id))
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao excluir arquivo: {e}")
        flash('Erro ao excluir arquivo.')
        return redirect(url_for('dashboard'))

@app.before_request
def log_request_info():
    if request.endpoint and 'atualizar_cadastro' in request.endpoint:
        logger.info(f"üåê REQUEST: {request.method} {request.url}")
        logger.info(f"üåê ENDPOINT: {request.endpoint}")
        logger.info(f"üåê FORM DATA: {dict(request.form) if request.form else 'None'}")

@app.route('/atualizar_cadastro/<int:cadastro_id>', methods=['POST'])
def atualizar_cadastro(cadastro_id):
    logger.info(f"üî• ROTA ATUALIZAR_CADASTRO ACESSADA - ID: {cadastro_id}")
    logger.info(f"üî• METHOD: {request.method}")
    logger.info(f"üî• URL: {request.url}")
    logger.info(f"üî• USER-AGENT: {request.headers.get('User-Agent', 'N/A')}")
    
    if 'usuario' not in session:
        logger.debug("Usu√°rio n√£o logado tentando acessar /atualizar_cadastro")
        return redirect(url_for('login'))
    
    logger.info(f"üíæ Iniciando atualiza√ß√£o do cadastro ID {cadastro_id}")
    logger.debug(f"Dados recebidos: nome_completo={request.form.get('nome_completo')}")
    logger.debug(f"Total de campos no formul√°rio: {len(request.form)}")
    logger.debug(f"Campos recebidos: {list(request.form.keys())[:10]}...")  # Primeiros 10 campos
    
    # Validar limites dos campos
    logger.debug("Iniciando valida√ß√£o de limites dos campos...")
    validation_errors = validate_field_lengths(request.form)
    if validation_errors:
        logger.error(f"‚ùå Valida√ß√£o falhou: {len(validation_errors)} erros encontrados")
        logger.error(f"Erros: {validation_errors}")
        for error in validation_errors:
            flash(f"Erro de valida√ß√£o: {error}", 'error')
        return redirect(url_for('editar_cadastro', cadastro_id=cadastro_id))
    
    logger.debug("‚úÖ Valida√ß√£o de limites passou")
    
    try:
        logger.debug("Obtendo conex√£o com banco de dados...")
        conn = get_db_connection()
        cursor = conn.cursor()
        logger.debug("Conex√£o PostgreSQL estabelecida")
        
        # Campos do formul√°rio
        campos = [
            'nome_completo', 'endereco', 'numero', 'bairro', 'cep', 'cidade', 'estado', 'telefone', 'ponto_referencia',
            'genero', 'idade', 'data_nascimento', 'titulo_eleitor', 'cidade_titulo',
            'cpf', 'rg', 'nis', 'estado_civil', 'escolaridade', 'profissao',
            'nome_companheiro', 'cpf_companheiro', 'rg_companheiro', 'idade_companheiro',
            'escolaridade_companheiro', 'profissao_companheiro', 'data_nascimento_companheiro',
            'titulo_companheiro', 'cidade_titulo_companheiro', 'nis_companheiro', 'tipo_trabalho',
            'pessoas_trabalham', 'aposentados_pensionistas', 'num_pessoas_familia', 'num_familias',
            'adultos', 'criancas', 'adolescentes', 'idosos', 'gestantes', 'nutrizes',
            'renda_familiar', 'renda_per_capita', 'bolsa_familia', 'casa_tipo', 'casa_material',
            'energia', 'lixo', 'agua', 'esgoto', 'observacoes', 'tem_doenca_cronica',
            'doencas_cronicas', 'usa_medicamento_continuo', 'medicamentos_continuos',
            'tem_doenca_mental', 'doencas_mentais', 'tem_deficiencia', 'tipo_deficiencia',
            'precisa_cuidados_especiais', 'cuidados_especiais',
            # Novos campos de trabalho
            'com_que_trabalha', 'onde_trabalha', 'localizacao_trabalho', 'horario_trabalho', 'tempo_atividade',
            'atua_ponto_fixo', 'qual_ponto_fixo', 'dias_semana_trabalha', 'trabalho_continuo_temporada',
            'sofreu_acidente_trabalho', 'qual_acidente', 'trabalho_incomoda_calor',
            'trabalho_incomoda_barulho', 'trabalho_incomoda_seguranca', 'trabalho_incomoda_banheiros',
            'trabalho_incomoda_outro', 'trabalho_incomoda_outro_desc', 'acesso_banheiro_agua',
            'trabalha_sozinho_ajudantes', 'possui_autorizacao_municipal', 'problemas_fiscalizacao_policia',
            'estrutura_barraca', 'estrutura_carrinho', 'estrutura_mesa', 'estrutura_outro',
            'estrutura_outro_desc', 'necessita_energia_eletrica', 'utiliza_gas_cozinha',
            'usa_veiculo_proprio', 'qual_veiculo', 'fonte_renda_trabalho_ambulante',
            'fonte_renda_aposentadoria', 'fonte_renda_outro_trabalho', 'fonte_renda_beneficio_social',
            'fonte_renda_outro', 'fonte_renda_outro_desc', 'pessoas_dependem_renda', 'foto_base64'
        ]
        
        logger.debug(f"Total de campos para atualiza√ß√£o: {len(campos)}")
        
        # Log espec√≠fico para foto_base64
        foto_form_value = request.form.get('foto_base64', '')
        logger.debug(f"üñºÔ∏è Valor foto_base64 do formul√°rio: {'Presente' if foto_form_value else 'Ausente'}")
        logger.debug(f"üñºÔ∏è Tamanho foto_base64: {len(foto_form_value)} caracteres")
        if foto_form_value:
            logger.debug(f"üñºÔ∏è Primeiros 50 chars: {foto_form_value[:50]}...")
        
        
        # Tratar campos num√©ricos vazios como NULL
        def safe_int_or_null(value):
            if value == '' or value is None:
                return None
            try:
                return int(value)
            except (ValueError, TypeError):
                return None
        
        def safe_decimal_or_null(value):
            if value == '' or value is None:
                return None
            try:
                return float(value)
            except (ValueError, TypeError):
                return None
        
        # Campos que devem ser tratados como inteiros
        campos_int = ['idade', 'idade_companheiro', 'pessoas_trabalham', 'aposentados_pensionistas', 
                     'num_pessoas_familia', 'num_familias', 'adultos', 'criancas', 'adolescentes', 
                     'idosos', 'gestantes', 'nutrizes', 'dias_semana_trabalha', 'pessoas_dependem_renda']
        
        # Campos que devem ser tratados como decimais
        campos_decimal = ['renda_familiar', 'renda_per_capita', 'bolsa_familia']
        
        valores = []
        for campo in campos:
            value = request.form.get(campo, '')
            if campo in campos_int:
                valores.append(safe_int_or_null(value))
            elif campo in campos_decimal:
                valores.append(safe_decimal_or_null(value))
            else:
                valores.append(value)
        
        valores.append(cadastro_id)
        
        logger.debug(f"Valores coletados: {len(valores)} valores")
        logger.debug(f"Primeiros 5 valores: {valores[:5]}")
        logger.debug(f"√öltimos 5 valores: {valores[-5:]}")
        
        # Construir query UPDATE dinamicamente baseada na lista de campos
        set_clauses = [f"{campo} = %s" for campo in campos]
        sql_update = f"""
        UPDATE cadastros SET 
        {', '.join(set_clauses)}
        WHERE id = %s
        """
        
        logger.debug(f"Query UPDATE constru√≠da com {len(set_clauses)} campos")
        logger.debug(f"Query: {sql_update[:200]}...")
        
        logger.debug("Executando query UPDATE...")
        cursor.execute(sql_update, valores)
        
        rows_affected = cursor.rowcount
        logger.debug(f"Linhas afetadas: {rows_affected}")
        
        if rows_affected > 0:
            # Upload de novos arquivos usando a mesma conex√£o
            uploaded_files = []
            for file_type in ['laudo', 'receita', 'imagem']:
                # Processar arrays de arquivos
                files = request.files.getlist(f'{file_type}[]')
                descriptions = request.form.getlist(f'descricao_{file_type}[]')
                
                for i, file in enumerate(files):
                    if file and file.filename and allowed_file(file.filename):
                        logger.debug(f"Processando arquivo: {file.filename} ({file_type})")
                        file_data = file.read()
                        descricao = descriptions[i] if i < len(descriptions) else ''
                        
                        cursor.execute('INSERT INTO arquivos_saude (cadastro_id, nome_arquivo, tipo_arquivo, arquivo_dados, descricao) VALUES (%s, %s, %s, %s, %s)', 
                                    (cadastro_id, file.filename, file_type, file_data, descricao))
                        
                        uploaded_files.append(f"{file_type}: {file.filename}")
                        logger.debug(f"Arquivo {file.filename} salvo com sucesso")
            
            # Processar dados de sa√∫de por pessoa - remover existentes e inserir novos
            logger.debug("Atualizando dados de sa√∫de por pessoa...")
            
            # Remover dados existentes
            cursor.execute('DELETE FROM dados_saude_pessoa WHERE cadastro_id = %s', (cadastro_id,))
            logger.debug("Dados de sa√∫de anteriores removidos")
            
            # Inserir novos dados
            pessoas_saude = []
            for key in request.form.keys():
                if key.startswith('saude_nome_'):
                    pessoa_num = key.split('_')[-1]
                    nome_pessoa = request.form.get(f'saude_nome_{pessoa_num}')
                    
                    if nome_pessoa:  # S√≥ processar se tem nome
                        # Processar checkboxes de condi√ß√µes
                        condicoes = request.form.getlist(f'saude_condicoes_{pessoa_num}[]')
                        
                        dados_pessoa = {
                            'nome_pessoa': nome_pessoa,
                            'tem_doenca_cronica': 'Sim' if 'doenca_cronica' in condicoes else 'N√£o',
                            'doencas_cronicas': request.form.get(f'saude_doencas_cronicas_{pessoa_num}', ''),
                            'usa_medicamento_continuo': 'Sim' if 'medicamento' in condicoes else 'N√£o',
                            'medicamentos': request.form.get(f'saude_medicamentos_{pessoa_num}', ''),
                            'tem_doenca_mental': 'Sim' if 'doenca_mental' in condicoes else 'N√£o',
                            'doencas_mentais': request.form.get(f'saude_doencas_mentais_{pessoa_num}', ''),
                            'tem_deficiencia': 'Sim' if 'deficiencia' in condicoes else 'N√£o',
                            'deficiencias': request.form.get(f'saude_deficiencias_{pessoa_num}', ''),
                            'precisa_cuidados_especiais': 'Sim' if 'cuidados' in condicoes else 'N√£o',
                            'cuidados_especiais': request.form.get(f'saude_cuidados_especiais_{pessoa_num}', '')
                        }
                        
                        # Inserir dados de sa√∫de da pessoa
                        cursor.execute('''
                            INSERT INTO dados_saude_pessoa (
                                cadastro_id, nome_pessoa, tem_doenca_cronica, doencas_cronicas,
                                usa_medicamento_continuo, medicamentos, tem_doenca_mental, doencas_mentais,
                                tem_deficiencia, deficiencias, precisa_cuidados_especiais, cuidados_especiais
                            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                        ''', (
                            cadastro_id, dados_pessoa['nome_pessoa'], dados_pessoa['tem_doenca_cronica'],
                            dados_pessoa['doencas_cronicas'], dados_pessoa['usa_medicamento_continuo'],
                            dados_pessoa['medicamentos'], dados_pessoa['tem_doenca_mental'],
                            dados_pessoa['doencas_mentais'], dados_pessoa['tem_deficiencia'],
                            dados_pessoa['deficiencias'], dados_pessoa['precisa_cuidados_especiais'],
                            dados_pessoa['cuidados_especiais']
                        ))
                        
                        pessoas_saude.append(nome_pessoa)
                        logger.debug(f"Dados de sa√∫de atualizados para: {nome_pessoa}")
            
            logger.info(f"‚úÖ Dados de sa√∫de atualizados para {len(pessoas_saude)} pessoas")
            
            conn.commit()
            logger.info(f"‚úÖ Cadastro {cadastro_id} atualizado com sucesso")
            
            # Registrar auditoria
            registrar_auditoria(
                usuario=session.get('usuario', 'Sistema'),
                acao='UPDATE',
                tabela='cadastros',
                registro_id=cadastro_id,
                dados_novos=f"Nome: {request.form.get('nome_completo')}, CPF: {request.form.get('cpf')}",
                ip_address=request.remote_addr,
                user_agent=request.headers.get('User-Agent')
            )
            
            if uploaded_files:
                flash(f'Cadastro atualizado com sucesso! Novos arquivos: {", ".join(uploaded_files)}')
            else:
                flash('Cadastro atualizado com sucesso!')
        else:
            logger.warning(f"‚ö†Ô∏è Nenhuma linha foi atualizada para cadastro {cadastro_id}")
            flash('Nenhuma altera√ß√£o foi feita no cadastro.')
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao atualizar cadastro {cadastro_id}: {str(e)}")
        logger.error(f"Tipo do erro: {type(e)}")
        import traceback
        logger.error(f"Traceback completo: {traceback.format_exc()}")
        # N√£o mostrar erro t√©cnico para o usu√°rio
        flash('Erro interno do sistema. Tente novamente.')
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()
        logger.debug("Conex√µes fechadas")
        logger.debug("Conex√£o fechada ap√≥s atualiza√ß√£o")
    
    return redirect(url_for('dashboard'))

@app.route('/deletar_cadastro/<int:cadastro_id>', methods=['POST'])
def deletar_cadastro(cadastro_id):
    if 'usuario' not in session:
        logger.debug("Usu√°rio n√£o logado tentando acessar /deletar_cadastro")
        return redirect(url_for('login'))
    
    logger.info(f"üóëÔ∏è Tentando deletar cadastro ID: {cadastro_id}")
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        logger.debug("Conex√£o estabelecida para dele√ß√£o")
        
        # Deletar arquivos de sa√∫de relacionados primeiro
        logger.debug("Deletando arquivos de sa√∫de relacionados...")
        cursor.execute('DELETE FROM arquivos_saude WHERE cadastro_id = %s', (cadastro_id,))
        arquivos_deletados = cursor.rowcount
        logger.debug(f"Arquivos deletados: {arquivos_deletados}")
        
        # Deletar o cadastro
        logger.debug("Deletando cadastro principal...")
        cursor.execute('DELETE FROM cadastros WHERE id = %s', (cadastro_id,))
        cadastros_deletados = cursor.rowcount
        
        if cadastros_deletados > 0:
            conn.commit()
            logger.info(f"‚úÖ Cadastro {cadastro_id} deletado com sucesso")
            flash('Cadastro deletado com sucesso!')
        else:
            logger.warning(f"‚ö†Ô∏è Cadastro {cadastro_id} n√£o encontrado para dele√ß√£o")
            flash('Cadastro n√£o encontrado!')
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao deletar cadastro {cadastro_id}: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        flash(f'Erro ao deletar cadastro: {str(e)}')
    finally:
        cursor.close()
        conn.close()
        logger.debug("Conex√£o fechada ap√≥s dele√ß√£o")
    
    return redirect(url_for('dashboard'))

# Rotas do Sistema de Caixa
@app.route('/caixa')
def caixa():
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    # Verificar permiss√£o de caixa
    if not usuario_tem_permissao(session['usuario'], 'caixa'):
        flash('Voc√™ n√£o tem permiss√£o para acessar o sistema de caixa', 'error')
        return redirect(url_for('dashboard'))
    
    try:
        logger.info("=== INICIANDO CAIXA ===")
        logger.info(f"Usu√°rio autenticado: {session['usuario']}")
        
        # Obter saldo atual
        logger.info("Tentando obter saldo do caixa...")
        saldo = obter_saldo_caixa()
        logger.info(f"Saldo obtido com sucesso: {saldo}")
        
        # Obter pessoas cadastradas para o select
        logger.info("Tentando obter lista de pessoas cadastradas...")
        pessoas = listar_cadastros_simples()
        logger.info(f"Pessoas obtidas com sucesso: {len(pessoas)} registros")
        
        # Obter √∫ltimas movimenta√ß√µes
        logger.info("Tentando obter √∫ltimas movimenta√ß√µes...")
        movimentacoes = listar_movimentacoes_caixa(limit=20)
        logger.info(f"Movimenta√ß√µes obtidas com sucesso: {len(movimentacoes)} registros")
        
        logger.info("Renderizando template caixa.html...")
        return render_template('caixa.html', 
                             saldo=saldo, 
                             pessoas=pessoas, 
                             movimentacoes=movimentacoes)
    
    except Exception as e:
        logger.error(f"Erro ao carregar caixa: {e}")
        logger.error(f"Tipo do erro: {type(e)}")
        import traceback
        logger.error(f"Traceback completo: {traceback.format_exc()}")
        flash('Erro ao carregar sistema de caixa', 'error')
        return redirect(url_for('dashboard'))

@app.route('/caixa', methods=['POST'])
def processar_movimentacao_caixa():
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    try:
        tipo = request.form.get('tipo')
        valor = float(request.form.get('valor', 0))
        descricao = request.form.get('descricao', '').strip()
        cadastro_id = request.form.get('cadastro_id') or None
        nome_pessoa = request.form.get('nome_pessoa', '').strip()
        numero_recibo = request.form.get('numero_recibo', '').strip()
        observacoes = request.form.get('observacoes', '').strip()
        
        if not descricao:
            flash('Descri√ß√£o √© obrigat√≥ria', 'error')
            return redirect(url_for('caixa'))
        
        if valor <= 0:
            flash('Valor deve ser maior que zero', 'error')
            return redirect(url_for('caixa'))
        
        # Inserir movimenta√ß√£o
        movimentacao_id = inserir_movimentacao_caixa(
            tipo, valor, descricao, cadastro_id, nome_pessoa, 
            numero_recibo, observacoes, session['usuario']
        )
        
        # Processar comprovantes se houver
        comprovantes = request.files.getlist('comprovantes')
        logger.info(f"üìé Total de comprovantes recebidos: {len(comprovantes)}")
        
        for i, comprovante in enumerate(comprovantes):
            logger.info(f"üìé Processando comprovante {i+1}: {comprovante.filename if comprovante else 'None'}")
            
            if comprovante and comprovante.filename:
                logger.info(f"  ‚úÖ Arquivo v√°lido: {comprovante.filename}")
                
                # Validar tipo de arquivo
                if not allowed_file(comprovante.filename):
                    logger.warning(f"  ‚ùå Tipo n√£o permitido: {comprovante.filename}")
                    flash(f'Tipo de arquivo n√£o permitido: {comprovante.filename}', 'error')
                    continue
                
                logger.info(f"  ‚úÖ Tipo permitido: {comprovante.filename}")
                
                # Validar tamanho (16MB m√°ximo)
                comprovante.seek(0, 2)  # Ir para o final
                size = comprovante.tell()
                comprovante.seek(0)  # Voltar ao in√≠cio
                
                logger.info(f"  üìè Tamanho do arquivo: {size} bytes ({size/1024/1024:.2f} MB)")
                
                if size > 16 * 1024 * 1024:  # 16MB
                    logger.warning(f"  ‚ùå Arquivo muito grande: {comprovante.filename}")
                    flash(f'Arquivo muito grande: {comprovante.filename}', 'error')
                    continue
                
                # Salvar comprovante
                logger.info(f"  üíæ Salvando comprovante: {comprovante.filename}")
                arquivo_dados = comprovante.read()
                inserir_comprovante_caixa(
                    movimentacao_id, 
                    comprovante.filename,
                    comprovante.content_type,
                    arquivo_dados
                )
                logger.info(f"  ‚úÖ Comprovante salvo: {comprovante.filename}")
            else:
                logger.info(f"  ‚ö†Ô∏è Comprovante {i+1} vazio ou sem nome")
        
        flash(f'Movimenta√ß√£o de {tipo} registrada com sucesso!', 'success')
        return redirect(url_for('caixa'))
    
    except Exception as e:
        logger.error(f"Erro ao processar movimenta√ß√£o: {e}")
        flash('Erro ao registrar movimenta√ß√£o', 'error')
        return redirect(url_for('caixa'))

@app.route('/relatorio_caixa')
def relatorio_caixa():
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    try:
        # Obter par√¢metros de filtro
        tipo = request.args.get('tipo', '')
        data_inicio = request.args.get('data_inicio', '')
        data_fim = request.args.get('data_fim', '')
        
        # Obter todas as movimenta√ß√µes (sem limite para relat√≥rio)
        movimentacoes = listar_movimentacoes_caixa(limit=1000, tipo=tipo if tipo else None)
        
        # Calcular totais
        total_entradas = sum(m['valor'] for m in movimentacoes if m['tipo'] == 'entrada')
        total_saidas = sum(m['valor'] for m in movimentacoes if m['tipo'] == 'saida')
        saldo_total = total_entradas - total_saidas
        
        return render_template('relatorio_caixa.html',
                             movimentacoes=movimentacoes,
                             total_entradas=total_entradas,
                             total_saidas=total_saidas,
                             saldo_total=saldo_total,
                             filtro_tipo=tipo,
                             filtro_data_inicio=data_inicio,
                             filtro_data_fim=data_fim)
    
    except Exception as e:
        logger.error(f"Erro ao gerar relat√≥rio de caixa: {e}")
        flash('Erro ao gerar relat√≥rio', 'error')
        return redirect(url_for('caixa'))

@app.route('/excluir_movimentacao/<int:movimentacao_id>')
def excluir_movimentacao(movimentacao_id):
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    logger.info(f"=== INICIANDO EXCLUS√ÉO DE MOVIMENTA√á√ÉO ===")
    logger.info(f"Usu√°rio: {session['usuario']}, Movimenta√ß√£o ID: {movimentacao_id}")
    
    if not usuario_tem_permissao(session['usuario'], 'caixa'):
        logger.warning(f"Usu√°rio {session['usuario']} sem permiss√£o para excluir movimenta√ß√µes")
        flash('Voc√™ n√£o tem permiss√£o para excluir movimenta√ß√µes', 'error')
        return redirect(url_for('dashboard'))
    
    try:
        logger.info("Conectando ao banco de dados...")
        conn = get_db_connection()
        cursor = conn.cursor()
        logger.info("Conex√£o estabelecida com sucesso")
        
        # Buscar dados da movimenta√ß√£o para auditoria
        logger.info(f"Buscando dados da movimenta√ß√£o ID {movimentacao_id}...")
        cursor.execute('SELECT * FROM movimentacoes_caixa WHERE id = %s', (movimentacao_id,))
        movimentacao = cursor.fetchone()
        
        if not movimentacao:
            logger.warning(f"Movimenta√ß√£o ID {movimentacao_id} n√£o encontrada")
            flash('Movimenta√ß√£o n√£o encontrada', 'error')
            return redirect(url_for('caixa'))
        
        logger.info(f"Movimenta√ß√£o encontrada: Tipo={movimentacao[1]}, Valor={movimentacao[2]}, Descri√ß√£o={movimentacao[3]}")
        
        # Excluir movimenta√ß√£o (comprovantes s√£o exclu√≠dos automaticamente por CASCADE)
        logger.info(f"Executando DELETE da movimenta√ß√£o ID {movimentacao_id}...")
        cursor.execute('DELETE FROM movimentacoes_caixa WHERE id = %s', (movimentacao_id,))
        linhas_afetadas = cursor.rowcount
        logger.info(f"Linhas afetadas: {linhas_afetadas}")
        
        conn.commit()
        logger.info("Commit realizado com sucesso")
        cursor.close()
        conn.close()
        logger.info("Conex√£o fechada")
        
        # Registrar auditoria
        logger.info("Registrando auditoria da exclus√£o...")
        registrar_auditoria(
            session['usuario'], 'DELETE', 'movimentacoes_caixa', 
            movimentacao_id, str(movimentacao), None
        )
        logger.info("Auditoria registrada com sucesso")
        
        flash('Movimenta√ß√£o exclu√≠da com sucesso!', 'success')
        logger.info(f"‚úÖ Movimenta√ß√£o ID {movimentacao_id} exclu√≠da com sucesso pelo usu√°rio {session['usuario']}")
        return redirect(url_for('caixa'))
    
    except Exception as e:
        logger.error(f"‚ùå Erro ao excluir movimenta√ß√£o ID {movimentacao_id}: {e}")
        logger.error(f"Tipo do erro: {type(e)}")
        import traceback
        logger.error(f"Traceback completo: {traceback.format_exc()}")
        flash('Erro ao excluir movimenta√ß√£o', 'error')
        return redirect(url_for('caixa'))

@app.route('/editar_movimentacao/<int:movimentacao_id>', methods=['GET', 'POST'])
def editar_movimentacao(movimentacao_id):
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    logger.info(f"üîß === EDITAR MOVIMENTA√á√ÉO - IN√çCIO ===")
    logger.info(f"üë§ Usu√°rio: {session['usuario']}")
    logger.info(f"üÜî Movimenta√ß√£o ID: {movimentacao_id}")
    logger.info(f"üìã M√©todo HTTP: {request.method}")
    
    if not usuario_tem_permissao(session['usuario'], 'caixa'):
        logger.warning(f"‚ö†Ô∏è Usu√°rio {session['usuario']} sem permiss√£o para editar movimenta√ß√µes")
        flash('Voc√™ n√£o tem permiss√£o para editar movimenta√ß√µes', 'error')
        return redirect(url_for('dashboard'))
    
    try:
        logger.info("üîå Conectando ao banco de dados...")
        conn = get_db_connection()
        
        # IMPORTANTE: Usar RealDictCursor para retornar dados como dicion√°rio
        import psycopg2.extras
        cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
        logger.info("‚úÖ Conex√£o estabelecida com RealDictCursor")
        
        if request.method == 'GET':
            logger.info("üìñ === M√âTODO GET - CARREGANDO DADOS ===")
            
            # Buscar dados da movimenta√ß√£o
            logger.info(f"üîç Buscando dados da movimenta√ß√£o ID {movimentacao_id}...")
            cursor.execute('SELECT * FROM movimentacoes_caixa WHERE id = %s', (movimentacao_id,))
            movimentacao = cursor.fetchone()
            
            if not movimentacao:
                logger.warning(f"‚ùå Movimenta√ß√£o ID {movimentacao_id} n√£o encontrada")
                flash('Movimenta√ß√£o n√£o encontrada', 'error')
                return redirect(url_for('caixa'))
            
            logger.info(f"‚úÖ Movimenta√ß√£o encontrada:")
            logger.info(f"  üÜî ID: {movimentacao['id']}")
            logger.info(f"  üìä Tipo: '{movimentacao['tipo']}'")
            logger.info(f"  üí∞ Valor: R$ {movimentacao['valor']}")
            logger.info(f"  üìù Descri√ß√£o: '{movimentacao['descricao']}'")
            logger.info(f"  üë§ Cadastro ID: {movimentacao['cadastro_id']}")
            logger.info(f"  üè∑Ô∏è Nome Pessoa: '{movimentacao['nome_pessoa']}'")
            logger.info(f"  üßæ N√∫mero Recibo: '{movimentacao['numero_recibo']}'")
            logger.info(f"  üìã Observa√ß√µes: '{movimentacao['observacoes']}'")
            logger.info(f"  üìÖ Data: {movimentacao['data_movimentacao']}")
            logger.info(f"  üë®‚Äçüíº Usu√°rio: '{movimentacao['usuario']}'")
            
            # Buscar pessoas cadastradas
            logger.info("üë• Buscando lista de pessoas cadastradas...")
            pessoas = listar_cadastros_simples()
            logger.info(f"‚úÖ Encontradas {len(pessoas)} pessoas cadastradas")
            
            cursor.close()
            conn.close()
            logger.info("üîå Conex√£o fechada")
            
            logger.info("üé® Renderizando template editar_movimentacao.html...")
            return render_template('editar_movimentacao.html', 
                                 movimentacao=movimentacao, 
                                 pessoas=pessoas)
        
        elif request.method == 'POST':
            logger.info("üíæ === M√âTODO POST - SALVANDO ALTERA√á√ïES ===")
            
            # Buscar dados atuais para auditoria
            logger.info(f"üîç Buscando dados atuais da movimenta√ß√£o ID {movimentacao_id} para auditoria...")
            cursor.execute('SELECT * FROM movimentacoes_caixa WHERE id = %s', (movimentacao_id,))
            dados_anteriores = cursor.fetchone()
            
            if not dados_anteriores:
                logger.warning(f"‚ùå Movimenta√ß√£o ID {movimentacao_id} n√£o encontrada para edi√ß√£o")
                flash('Movimenta√ß√£o n√£o encontrada', 'error')
                return redirect(url_for('caixa'))
            
            logger.info(f"‚úÖ Dados anteriores encontrados:")
            logger.info(f"  üìä Tipo anterior: '{dados_anteriores['tipo']}'")
            logger.info(f"  üí∞ Valor anterior: R$ {dados_anteriores['valor']}")
            logger.info(f"  üìù Descri√ß√£o anterior: '{dados_anteriores['descricao']}'")
            
            # Processar dados do formul√°rio
            logger.info("üìã Processando dados do formul√°rio...")
            tipo = request.form.get('tipo')
            valor_str = request.form.get('valor', '0')
            descricao = request.form.get('descricao', '').strip()
            cadastro_id = request.form.get('cadastro_id')
            nome_pessoa = request.form.get('nome_pessoa', '').strip()
            numero_recibo = request.form.get('numero_recibo', '').strip()
            observacoes = request.form.get('observacoes', '').strip()
            
            logger.info(f"üìù Dados recebidos do formul√°rio:")
            logger.info(f"  üìä Tipo: '{tipo}'")
            logger.info(f"  üí∞ Valor (string): '{valor_str}'")
            logger.info(f"  üìù Descri√ß√£o: '{descricao}'")
            logger.info(f"  üë§ Cadastro ID: '{cadastro_id}'")
            logger.info(f"  üè∑Ô∏è Nome Pessoa: '{nome_pessoa}'")
            logger.info(f"  üßæ N√∫mero Recibo: '{numero_recibo}'")
            logger.info(f"  üìã Observa√ß√µes: '{observacoes}'")
            
            # Valida√ß√µes
            if not descricao:
                logger.warning("‚ùå Descri√ß√£o n√£o fornecida - valida√ß√£o falhou")
                flash('Descri√ß√£o √© obrigat√≥ria', 'error')
                return redirect(url_for('editar_movimentacao', movimentacao_id=movimentacao_id))
            
            try:
                valor = float(valor_str)
                logger.info(f"‚úÖ Valor convertido para float: {valor}")
            except ValueError:
                logger.warning(f"‚ùå Erro ao converter valor '{valor_str}' para float")
                flash('Valor deve ser um n√∫mero v√°lido', 'error')
                return redirect(url_for('editar_movimentacao', movimentacao_id=movimentacao_id))
            
            if valor <= 0:
                logger.warning(f"‚ùå Valor inv√°lido: {valor} - deve ser maior que zero")
                flash('Valor deve ser maior que zero', 'error')
                return redirect(url_for('editar_movimentacao', movimentacao_id=movimentacao_id))
            
            # Converter cadastro_id
            if cadastro_id == '' or cadastro_id is None:
                cadastro_id = None
                logger.info("  üë§ Cadastro ID convertido para None (vazio)")
            else:
                try:
                    cadastro_id = int(cadastro_id)
                    logger.info(f"  üë§ Cadastro ID convertido para int: {cadastro_id}")
                except ValueError:
                    logger.warning(f"‚ùå Erro ao converter cadastro_id '{cadastro_id}' para int")
                    cadastro_id = None
            
            # Atualizar movimenta√ß√£o
            logger.info(f"üíæ Executando UPDATE da movimenta√ß√£o ID {movimentacao_id}...")
            cursor.execute('''
                UPDATE movimentacoes_caixa 
                SET tipo = %s, valor = %s, descricao = %s, cadastro_id = %s, 
                    nome_pessoa = %s, numero_recibo = %s, observacoes = %s
                WHERE id = %s
            ''', (tipo, valor, descricao, cadastro_id, nome_pessoa, 
                  numero_recibo, observacoes, movimentacao_id))
            
            linhas_afetadas = cursor.rowcount
            logger.info(f"üìä Linhas afetadas pelo UPDATE: {linhas_afetadas}")
            
            if linhas_afetadas == 0:
                logger.warning("‚ùå Nenhuma linha foi atualizada")
                flash('Erro ao atualizar movimenta√ß√£o', 'error')
                return redirect(url_for('editar_movimentacao', movimentacao_id=movimentacao_id))
            
            conn.commit()
            logger.info("‚úÖ Commit realizado com sucesso")
            
            cursor.close()
            conn.close()
            logger.info("üîå Conex√£o fechada")
            
            # Registrar auditoria
            logger.info("üìã Registrando auditoria da edi√ß√£o...")
            registrar_auditoria(
                session['usuario'], 'UPDATE', 'movimentacoes_caixa', 
                movimentacao_id, str(dados_anteriores), 
                f"Tipo: {tipo}, Valor: {valor}, Descri√ß√£o: {descricao}"
            )
            logger.info("‚úÖ Auditoria registrada com sucesso")
            
            flash('Movimenta√ß√£o atualizada com sucesso!', 'success')
            logger.info(f"üéâ Movimenta√ß√£o ID {movimentacao_id} atualizada com sucesso pelo usu√°rio {session['usuario']}")
            return redirect(url_for('caixa'))
    
    except Exception as e:
        logger.error(f"üí• ERRO CR√çTICO ao editar movimenta√ß√£o ID {movimentacao_id}:")
        logger.error(f"‚ùå Erro: {str(e)}")
        logger.error(f"‚ùå Tipo do erro: {type(e).__name__}")
        import traceback
        logger.error(f"‚ùå Traceback completo:")
        for line in traceback.format_exc().split('\n'):
            if line.strip():
                logger.error(f"   {line}")
        
        # Tentar fechar conex√µes se existirem
        try:
            if 'cursor' in locals():
                cursor.close()
            if 'conn' in locals():
                conn.close()
            logger.info("üîå Conex√µes fechadas ap√≥s erro")
        except:
            pass
            
        flash('Erro ao editar movimenta√ß√£o', 'error')
        return redirect(url_for('caixa'))

@app.route('/visualizar_comprovantes/<int:movimentacao_id>')
def visualizar_comprovantes(movimentacao_id):
    logger.info(f"üî• ROTA VISUALIZAR_COMPROVANTES CHAMADA - ID: {movimentacao_id}")
    
    if 'usuario' not in session:
        logger.warning("‚ùå Usu√°rio n√£o logado - redirecionando para login")
        return redirect(url_for('login'))
    
    logger.info(f"üìé === VISUALIZAR COMPROVANTES - IN√çCIO ===")
    logger.info(f"üë§ Usu√°rio: {session['usuario']}")
    logger.info(f"üÜî Movimenta√ß√£o ID: {movimentacao_id}")
    
    if not usuario_tem_permissao(session['usuario'], 'caixa'):
        logger.warning(f"‚ö†Ô∏è Usu√°rio {session['usuario']} sem permiss√£o para visualizar comprovantes")
        flash('Voc√™ n√£o tem permiss√£o para visualizar comprovantes', 'error')
        return redirect(url_for('dashboard'))
    
    logger.info("‚úÖ Permiss√£o verificada - usu√°rio tem acesso ao caixa")
    
    try:
        logger.info("üîå Conectando ao banco de dados...")
        conn = get_db_connection()
        cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
        logger.info("‚úÖ Conex√£o estabelecida com RealDictCursor")
        
        # Buscar dados da movimenta√ß√£o
        logger.info(f"üîç Buscando dados da movimenta√ß√£o ID {movimentacao_id}...")
        cursor.execute('SELECT * FROM movimentacoes_caixa WHERE id = %s', (movimentacao_id,))
        movimentacao = cursor.fetchone()
        
        if not movimentacao:
            logger.warning(f"‚ùå Movimenta√ß√£o ID {movimentacao_id} n√£o encontrada")
            flash('Movimenta√ß√£o n√£o encontrada', 'error')
            return redirect(url_for('caixa'))
        
        logger.info(f"‚úÖ Movimenta√ß√£o encontrada:")
        logger.info(f"  üìä Tipo: {movimentacao['tipo']}")
        logger.info(f"  üí∞ Valor: R$ {movimentacao['valor']}")
        logger.info(f"  üìù Descri√ß√£o: {movimentacao['descricao']}")
        
        # Buscar comprovantes
        logger.info(f"üìé Chamando obter_comprovantes_movimentacao({movimentacao_id})...")
        try:
            comprovantes = obter_comprovantes_movimentacao(movimentacao_id)
            logger.info(f"‚úÖ Comprovantes obtidos: {len(comprovantes)} arquivos")
            
            if comprovantes:
                for i, comp in enumerate(comprovantes):
                    logger.info(f"  üìé Comprovante {i+1}: {comp['nome_arquivo']} ({comp['tipo_arquivo']})")
            else:
                logger.info("  ‚ÑπÔ∏è Nenhum comprovante encontrado")
                
        except Exception as comp_error:
            logger.error(f"‚ùå ERRO ao obter comprovantes: {comp_error}")
            logger.error(f"‚ùå Tipo do erro: {type(comp_error).__name__}")
            import traceback
            logger.error(f"‚ùå Traceback:")
            for line in traceback.format_exc().split('\n'):
                if line.strip():
                    logger.error(f"   {line}")
            raise comp_error
        
        cursor.close()
        conn.close()
        logger.info("üîå Conex√£o fechada")
        
        logger.info("üé® Renderizando template visualizar_comprovantes.html...")
        return render_template('visualizar_comprovantes.html', 
                             movimentacao=movimentacao, 
                             comprovantes=comprovantes)
    
    except Exception as e:
        logger.error(f"üí• ERRO CR√çTICO ao visualizar comprovantes:")
        logger.error(f"‚ùå Erro: {str(e)}")
        logger.error(f"‚ùå Tipo do erro: {type(e).__name__}")
        import traceback
        logger.error(f"‚ùå Traceback completo:")
        for line in traceback.format_exc().split('\n'):
            if line.strip():
                logger.error(f"   {line}")
        
        # Tentar fechar conex√µes se existirem
        try:
            if 'cursor' in locals():
                cursor.close()
            if 'conn' in locals():
                conn.close()
            logger.info("üîå Conex√µes fechadas ap√≥s erro")
        except:
            pass
            
        flash('Erro ao carregar comprovantes', 'error')
        return redirect(url_for('caixa'))

@app.route('/download_comprovante/<int:comprovante_id>')
def download_comprovante(comprovante_id):
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    if not usuario_tem_permissao(session['usuario'], 'caixa'):
        flash('Voc√™ n√£o tem permiss√£o para baixar comprovantes', 'error')
        return redirect(url_for('dashboard'))
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT nome_arquivo, tipo_arquivo, arquivo_dados
            FROM comprovantes_caixa
            WHERE id = %s
        ''', (comprovante_id,))
        
        comprovante = cursor.fetchone()
        cursor.close()
        conn.close()
        
        if not comprovante:
            flash('Comprovante n√£o encontrado', 'error')
            return redirect(url_for('caixa'))
        
        import io
        return send_file(
            io.BytesIO(comprovante[2]),
            as_attachment=True,
            download_name=comprovante[0],
            mimetype=comprovante[1]
        )
    
    except Exception as e:
        logger.error(f"Erro ao baixar comprovante: {e}")
        flash('Erro ao baixar comprovante', 'error')
        return redirect(url_for('caixa'))

@app.route('/exportar_comprovantes_pdf/<int:movimentacao_id>')
def exportar_comprovantes_pdf(movimentacao_id):
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    if not usuario_tem_permissao(session['usuario'], 'caixa'):
        flash('Voc√™ n√£o tem permiss√£o para exportar comprovantes', 'error')
        return redirect(url_for('dashboard'))
    
    try:
        from reportlab.lib.pagesizes import A4
        from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
        from reportlab.lib.styles import getSampleStyleSheet
        from reportlab.lib import colors
        from reportlab.lib.units import inch
        import io
        from PIL import Image as PILImage
        
        conn = get_db_connection()
        cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
        
        # Buscar dados da movimenta√ß√£o
        cursor.execute('SELECT * FROM movimentacoes_caixa WHERE id = %s', (movimentacao_id,))
        movimentacao = cursor.fetchone()
        
        if not movimentacao:
            flash('Movimenta√ß√£o n√£o encontrada', 'error')
            return redirect(url_for('caixa'))
        
        # Buscar comprovantes
        comprovantes = obter_comprovantes_movimentacao(movimentacao_id)
        
        cursor.close()
        conn.close()
        
        # Criar PDF
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        elements = []
        
        # T√≠tulo
        title = Paragraph(f"AMEG - Comprovantes da Movimenta√ß√£o #{movimentacao_id}", styles['Title'])
        elements.append(title)
        elements.append(Spacer(1, 20))
        
        # Dados da movimenta√ß√£o
        mov_data = [
            ['Tipo:', movimentacao['tipo'].title()],
            ['Valor:', f"R$ {movimentacao['valor']:.2f}"],
            ['Descri√ß√£o:', movimentacao['descricao']],
            ['Data:', movimentacao['data_movimentacao'].strftime('%d/%m/%Y %H:%M')],
            ['Usu√°rio:', movimentacao['usuario']]
        ]
        
        mov_table = Table(mov_data, colWidths=[2*inch, 4*inch])
        mov_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        elements.append(mov_table)
        elements.append(Spacer(1, 30))
        
        # Incluir os comprovantes reais
        if comprovantes:
            elements.append(Paragraph("Comprovantes Anexados:", styles['Heading2']))
            elements.append(Spacer(1, 20))
            
            for i, comp in enumerate(comprovantes, 1):
                # T√≠tulo do comprovante
                elements.append(Paragraph(f"{i}. {comp['nome_arquivo']}", styles['Heading3']))
                elements.append(Spacer(1, 10))
                
                # Buscar dados do arquivo
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute('SELECT arquivo_dados FROM comprovantes_caixa WHERE id = %s', (comp['id'],))
                arquivo_dados = cursor.fetchone()[0]
                cursor.close()
                conn.close()
                
                try:
                    if comp['tipo_arquivo'].startswith('image/'):
                        # Para imagens, incluir no PDF
                        img_buffer = io.BytesIO(arquivo_dados)
                        pil_img = PILImage.open(img_buffer)
                        
                        # Redimensionar se necess√°rio
                        max_width, max_height = 400, 300
                        pil_img.thumbnail((max_width, max_height), PILImage.Resampling.LANCZOS)
                        
                        # Converter para ReportLab
                        img_buffer2 = io.BytesIO()
                        pil_img.save(img_buffer2, format='PNG')
                        img_buffer2.seek(0)
                        
                        img = Image(img_buffer2, width=pil_img.width, height=pil_img.height)
                        elements.append(img)
                        
                    elif comp['tipo_arquivo'] == 'application/pdf':
                        # Para PDFs, adicionar nota
                        elements.append(Paragraph(f"üìÑ Arquivo PDF: {comp['nome_arquivo']}", styles['Normal']))
                        elements.append(Paragraph("(Conte√∫do do PDF n√£o pode ser incorporado)", styles['Italic']))
                        
                    else:
                        # Para outros tipos, adicionar informa√ß√£o
                        elements.append(Paragraph(f"üìé Arquivo: {comp['nome_arquivo']}", styles['Normal']))
                        elements.append(Paragraph(f"Tipo: {comp['tipo_arquivo']}", styles['Normal']))
                        
                except Exception as file_error:
                    logger.error(f"Erro ao processar arquivo {comp['nome_arquivo']}: {file_error}")
                    elements.append(Paragraph(f"‚ùå Erro ao processar arquivo: {comp['nome_arquivo']}", styles['Normal']))
                
                elements.append(Spacer(1, 20))
        else:
            elements.append(Paragraph("Nenhum comprovante anexado.", styles['Normal']))
        
        doc.build(elements)
        buffer.seek(0)
        
        filename = f"comprovantes_movimentacao_{movimentacao_id}.pdf"
        return send_file(buffer, as_attachment=True, download_name=filename, mimetype='application/pdf')
    
    except Exception as e:
        logger.error(f"Erro ao exportar comprovantes PDF: {e}")
        flash('Erro ao gerar PDF dos comprovantes', 'error')
        return redirect(url_for('caixa'))

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üöÄ Iniciando AMEG na porta {port}")
    logger.info(f"Debug mode: {app.debug}")
    logger.info(f"Environment: {'Railway' if os.environ.get('RAILWAY_ENVIRONMENT') else 'Local'}")
    app.run(host='0.0.0.0', port=port, debug=False)
@app.route('/auditoria')
def auditoria():
    logger.info("üîç Acessando rota de auditoria")
    
    if 'usuario' not in session:
        logger.debug("Usu√°rio n√£o logado tentando acessar auditoria")
        return redirect(url_for('login'))
    
    # Verificar se √© admin
    if session.get('tipo') != 'admin':
        logger.warning(f"Usu√°rio {session.get('usuario')} (tipo: {session.get('tipo')}) tentou acessar auditoria")
        flash('Acesso negado. Apenas administradores podem acessar a auditoria.')
        return redirect(url_for('dashboard'))
    
    logger.info(f"Admin {session.get('usuario')} acessando auditoria")
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        logger.debug("Conex√£o estabelecida para auditoria")
        
        # Par√¢metros de filtro
        usuario_filtro = request.args.get('usuario', '')
        acao_filtro = request.args.get('acao', '')
        tabela_filtro = request.args.get('tabela', '')
        data_inicial = request.args.get('data_inicial', '')
        data_final = request.args.get('data_final', '')
        page = int(request.args.get('page', 1))
        per_page = 50
        
        logger.debug(f"Filtros: usuario={usuario_filtro}, acao={acao_filtro}, tabela={tabela_filtro}")
        
        # Construir query com filtros
        where_conditions = []
        params = []
        
        if usuario_filtro:
            where_conditions.append("usuario ILIKE %s")
            params.append(f"%{usuario_filtro}%")
        
        if acao_filtro:
            where_conditions.append("acao = %s")
            params.append(acao_filtro)
        
        if tabela_filtro:
            where_conditions.append("tabela = %s")
            params.append(tabela_filtro)
        
        if data_inicial:
            where_conditions.append("DATE(data_acao) >= %s")
            params.append(data_inicial)
        
        if data_final:
            where_conditions.append("DATE(data_acao) <= %s")
            params.append(data_final)
        
        where_clause = ""
        if where_conditions:
            where_clause = "WHERE " + " AND ".join(where_conditions)
        
        logger.debug(f"WHERE clause: {where_clause}")
        
        # Contar total de registros
        cursor.execute(f"SELECT COUNT(*) as total FROM auditoria {where_clause}", params)
        total_records = cursor.fetchone()['total']
        total_pages = (total_records + per_page - 1) // per_page
        
        logger.debug(f"Total de registros: {total_records}")
        
        # Buscar registros com pagina√ß√£o
        offset = (page - 1) * per_page
        cursor.execute(f"""
            SELECT * FROM auditoria {where_clause}
            ORDER BY data_acao DESC
            LIMIT %s OFFSET %s
        """, params + [per_page, offset])
        
        auditorias = cursor.fetchall()
        logger.debug(f"Registros encontrados: {len(auditorias)}")
        
        # Estat√≠sticas
        cursor.execute("SELECT COUNT(*) as total FROM auditoria")
        stats_total = cursor.fetchone()['total']
        
        cursor.execute("SELECT COUNT(*) as hoje FROM auditoria WHERE DATE(data_acao) = CURRENT_DATE")
        stats_hoje = cursor.fetchone()['hoje']
        
        cursor.execute("SELECT COUNT(DISTINCT usuario) as usuarios FROM auditoria WHERE DATE(data_acao) >= CURRENT_DATE - INTERVAL '7 days'")
        stats_usuarios = cursor.fetchone()['usuarios']
        
        cursor.execute("SELECT data_acao FROM auditoria ORDER BY data_acao DESC LIMIT 1")
        ultima_acao = cursor.fetchone()
        stats_ultima = ultima_acao['data_acao'].strftime('%H:%M') if ultima_acao else 'N/A'
        
        stats = {
            'total': stats_total,
            'hoje': stats_hoje,
            'usuarios_ativos': stats_usuarios,
            'ultima_acao': stats_ultima
        }
        
        logger.debug(f"Estat√≠sticas: {stats}")
        
        # Par√¢metros para pagina√ß√£o
        query_params = "&".join([f"{k}={v}" for k, v in request.args.items() if k != 'page'])
        
        cursor.close()
        conn.close()
        
        logger.info("‚úÖ Dados de auditoria carregados com sucesso")
        
        return render_template('auditoria.html', 
                             auditorias=auditorias,
                             stats=stats,
                             page=page,
                             total_pages=total_pages,
                             query_params=query_params)
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar auditoria: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        flash('Erro ao carregar dados de auditoria.')
        return redirect(url_for('dashboard'))
@app.route('/admin/reset')
def admin_reset():
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    # Verificar se √© o admin ID 1
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM usuarios WHERE usuario = %s AND id = 1', (session['usuario'],))
    admin_check = cursor.fetchone()
    cursor.close()
    conn.close()
    
    if not admin_check:
        flash('Acesso negado! Apenas o admin principal pode acessar esta funcionalidade.')
        return redirect(url_for('dashboard'))
    
    return render_template('admin_reset.html')

@app.route('/admin/reset/execute', methods=['POST'])
def admin_reset_execute():
    if 'usuario' not in session:
        return redirect(url_for('login'))
    
    # Verificar se √© o admin ID 1
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM usuarios WHERE usuario = %s AND id = 1', (session['usuario'],))
    admin_check = cursor.fetchone()
    
    if not admin_check:
        cursor.close()
        conn.close()
        flash('Acesso negado! Apenas o admin principal pode executar o reset.')
        return redirect(url_for('dashboard'))
    
    try:
        logger.warning(f"üö® RESET INICIADO pelo admin ID 1: {session['usuario']}")
        
        # Zerar tabelas (mant√©m estrutura)
        cursor.execute('TRUNCATE TABLE arquivos_saude RESTART IDENTITY CASCADE')
        cursor.execute('TRUNCATE TABLE auditoria RESTART IDENTITY CASCADE')
        cursor.execute('TRUNCATE TABLE cadastros RESTART IDENTITY CASCADE')
        
        # Resetar sequences manualmente (garantia)
        cursor.execute('ALTER SEQUENCE arquivos_saude_id_seq RESTART WITH 1')
        cursor.execute('ALTER SEQUENCE auditoria_id_seq RESTART WITH 1')
        cursor.execute('ALTER SEQUENCE cadastros_id_seq RESTART WITH 1')
        
        conn.commit()
        
        # Registrar auditoria do reset
        registrar_auditoria(
            usuario=session['usuario'],
            acao='RESET',
            tabela='SISTEMA',
            dados_novos='Reset completo das tabelas: cadastros, arquivos_saude, auditoria',
            ip_address=request.remote_addr,
            user_agent=request.headers.get('User-Agent')
        )
        
        logger.warning(f"‚úÖ RESET CONCLU√çDO pelo admin ID 1: {session['usuario']}")
        flash('Reset executado com sucesso! Todas as tabelas foram zeradas e contadores reiniciados.')
        
    except Exception as e:
        logger.error(f"‚ùå Erro durante reset: {e}")
        flash(f'Erro durante reset: {str(e)}')
        conn.rollback()
    
    cursor.close()
    conn.close()
    return redirect(url_for('admin_reset'))
@app.route('/api/stats')
def api_stats():
    if 'usuario' not in session:
        return {"error": "N√£o autorizado"}, 401
    
    try:
        # Usar cache para estat√≠sticas
        stats = get_cached_stats()
        
        return {
            "cadastros": stats['total'],
            "arquivos": stats['arquivos'],
            "auditoria": stats.get('auditoria', 0)  # Fallback para compatibilidade
        }
        
    except Exception as e:
        logger.error(f"Erro na API stats: {e}")
        return {"error": str(e)}, 500
